-- -*- mode: lua; coding: windows-1251-dos -*-
-----------------------------------------------------------------------
--- watcher_act.script
--- Сторонние материалы мода OGSE 0.7 - Схема собирательства
--- бесхозного лута и обыска трупов
--- полная переработка KamikaZze (c) OGS Evolution Team 2011
--- version 1.8 SHoC (02/07/2014)
-----------------------------------------------------------------------

local obj_owner        = {}
local claimed_pos      = {}
local sound_timer      = {}
local desired_distance = 1.3

local bad_dangers = {
  [ danger_object.hit          ] = true,
  [ danger_object.attacked     ] = true,
  [ danger_object.attack_sound ] = true,
  [ danger_object.bullet_ricochet ] = true,
  [ danger_object.grenade      ] = true,
  [ danger_object.enemy_sound  ] = true
}
local inertion_time = 30000

local valuable_clsid = {
  [ clsid.art_bast_artefact ] = true,
  [ clsid.art_black_drops   ] = true,
  [ clsid.art_dummy         ] = true,
  [ clsid.art_electric_ball ] = true,
  [ clsid.art_faded_ball    ] = true,
  [ clsid.art_galantine     ] = true,
  [ clsid.art_gravi         ] = true,
  [ clsid.art_gravi_black   ] = true,
  [ clsid.art_mercury_ball  ] = true,
  [ clsid.art_needles       ] = true,
  [ clsid.art_rusty_hair    ] = true,
  [ clsid.art_thorn         ] = true,
  [ clsid.art_zuda          ] = true,
  [ clsid.artefact          ] = true,
  [ clsid.artefact_s        ] = true,

  [ clsid.device_detector_simple ] = true,
  [ clsid.device_pda        ] = true,
  [ clsid.device_torch_s    ] = true,

  [ clsid.equ_exo           ] = true,
  [ clsid.equ_military      ] = true,
  [ clsid.equ_scientific    ] = true,
  [ clsid.equ_stalker       ] = true,
  [ clsid.equ_stalker_s     ] = true,

  [ clsid.obj_antirad       ] = true,
  [ clsid.obj_attachable    ] = true,
  [ clsid.obj_bandage       ] = true,
  [ clsid.obj_bolt          ] = true,
  [ clsid.obj_bottle        ] = true,
  [ clsid.obj_food          ] = true,
  [ clsid.obj_medkit        ] = true,

  [ clsid.wpn_scope_s       ] = true,
  [ clsid.wpn_silencer      ] = true,

  [ clsid.wpn_ammo          ] = true,
  [ clsid.wpn_ammo_m209     ] = true,
  [ clsid.wpn_ammo_og7b     ] = true,
  [ clsid.wpn_ammo_vog25    ] = true,

  [ clsid.wpn_ak74          ] = true,
  [ clsid.wpn_ak74_s        ] = true,
  [ clsid.wpn_bm16          ] = true,
  [ clsid.wpn_bm16_s        ] = true,
  [ clsid.wpn_fn2000        ] = true,
  [ clsid.wpn_fort          ] = true,
  [ clsid.wpn_grenade_f1    ] = true,
  [ clsid.wpn_grenade_launcher ] = true,
  [ clsid.wpn_grenade_rgd5  ] = true,
  [ clsid.wpn_grenade_rpg7  ] = true,
  [ clsid.wpn_groza         ] = true,
  [ clsid.wpn_groza_s       ] = true,
  [ clsid.wpn_hpsa          ] = true,
  [ clsid.wpn_hpsa_s        ] = true,
  [ clsid.wpn_lr300         ] = true,
  [ clsid.wpn_lr300_s       ] = true,
  [ clsid.wpn_pm            ] = true,
  [ clsid.wpn_pm_s          ] = true,
  [ clsid.wpn_rg6           ] = true,
  [ clsid.wpn_rg6_s         ] = true,
  [ clsid.wpn_rpg7          ] = true,
  [ clsid.wpn_rpg7_s        ] = true,
  [ clsid.wpn_shotgun       ] = true,
  [ clsid.wpn_shotgun_s     ] = true,
  [ clsid.wpn_svd           ] = true,
  [ clsid.wpn_svd_s         ] = true,
  [ clsid.wpn_svu           ] = true,
  [ clsid.wpn_svu_s         ] = true,
  [ clsid.wpn_usp45         ] = true,
  [ clsid.wpn_usp45_s       ] = true,
  [ clsid.wpn_val           ] = true,
  [ clsid.wpn_val_s         ] = true,
  [ clsid.wpn_vintorez      ] = true,
  [ clsid.wpn_vintorez_s    ] = true,
  [ clsid.wpn_walther       ] = true,
  [ clsid.wpn_walther_s     ] = true,
}

local dead_enemy = {
  "characters_voice\\human_01\\dolg\\reactions\\dead_enemy\\dead_enemy_1",
  "characters_voice\\human_01\\dolg\\reactions\\dead_enemy\\dead_enemy_2",
  "characters_voice\\human_01\\dolg\\reactions\\dead_enemy\\dead_enemy_3",
  "characters_voice\\human_01\\dolg\\reactions\\dead_enemy\\dead_enemy_4",
  "characters_voice\\human_01\\dolg\\reactions\\dead_enemy\\dead_enemy_5",
}

local dead_friend = {
  "characters_voice\\human_01\\dolg\\reactions\\dead_friend\\dead_friend_1",
  "characters_voice\\human_01\\dolg\\reactions\\dead_friend\\dead_friend_2",
  "characters_voice\\human_01\\dolg\\reactions\\dead_friend\\dead_friend_3",
}

local dead_neutral = {
  "characters_voice\\human_01\\dolg\\reactions\\dead_neutral\\dead_neutral_1",
  "characters_voice\\human_01\\dolg\\reactions\\dead_neutral\\dead_neutral_2",
  "characters_voice\\human_01\\dolg\\reactions\\dead_neutral\\dead_neutral_3",
}

local dead_mutant = {
  "characters_voice\\human_01\\dolg\\reactions\\dead_mutant\\dead_mutant_1",
  "characters_voice\\human_01\\dolg\\reactions\\dead_mutant\\dead_mutant_2",
  "characters_voice\\human_01\\dolg\\reactions\\dead_mutant\\dead_mutant_3",
}


function do_not_touch( item )
  if not item then return true end
  local section = item:section()
  if
    get_bool( section, "quest_item", false )
    or get_bool( section, "watcher_act.bad_item", false )
    or protected_items.actor_items_keep( section )
    or protected_items.is_grab_body_item_keep( section )
  then
    return true
  end
  return false
end


function is_quest_npc( npc )
  return ogse.is_quest_npc( npc )
    and not amk_offline_alife.npc_can_trade_anyway[ npc:name() ]
end


function cannot_take_that( npc )
  if npc then
    if
      protected_items.is_no_offline_alife_npc( npc:section() )
      or is_quest_npc( npc )
      or npc:character_community() == "zombied"
      or npc:character_community() == "trader"
      or npc:character_community() == "arena_enemy"
      or npc:character_community() == "quest_stalker"
      or npc:name() == "mil_freedom_member0021"
      or string.find( npc:name(), "pri_followers", 1, true )
    then
      return true
    end
  end
  return false
end


function max_weight( npc )
  return npc:get_inventory_weight()
end


function bad_danger( npc )
  local danger = npc:best_danger()
  if danger then
    return bad_dangers[ danger:type() ]
      and time_global() - danger:time() < inertion_time
  end
  return false
end


--- Тут мы проверяем нельзя ли нам лутать
function bad_situation( npc )
  if not ( npc and npc:alive() ) then return true end
  if xr_companion.is_companion( npc:id() ) then return true end

  local st     = db.storage[ npc:id() ]
  local actsch = st.active_scheme -- получим активную схему
  if actsch then
    if
      -- если активная схема запрещает лут, возвращаем низзя
      st[ actsch ].no_loot
      or actsch == "remark"        -- если играем в скриптовой сценке
      or actsch == "combat"        -- если сражаемся
      or actsch == "wounded"       -- если отыгрываем тяжелораненного
      or actssh == "actor_dialogs" -- если говорим с актором
    then
      return true
    end
  end

  local lname = level.name()
  if
    lname == "l03_agroprom"
    and has_alife_info( "agr_krot_go_to_well" )
    and not has_alife_info( "agr_find_gunslinger_cache_found" )
  then
    return true              -- чтобы не лезли под пули сталкеры Крота
  end

  if
    xrs_battle_ai.cooldown[ npc:id() ]
    and xrs_battle_ai.cooldown[ npc:id() ] > time_global()
  then
    return true                 -- ещё не успокоились после боя
  end

  if
    npc:best_enemy()                -- если рядом враг
    or bad_danger( npc )            -- если мы в опасности
    or cannot_take_that( npc )      -- если мы не той фракции
    or xr_wounded.is_wounded( npc ) -- если мы ранены и просим помощи
    or max_weight( npc ) > 100 -- если непись и так уже нагрёб дохренища вещей
  then
    return true
  end

  --- если актор ближе 3 метров, пытается пообщаццо (так же запрещает
  --- лут трупа актора, этого делать нельзя, будет вылет)
  if npc:position():distance_to( db.actor:position() ) < 3 then
    return true
  end
  if
    db.actor:alive()
    and npc:relation( db.actor ) == game_object.enemy
    and xrs_battle_ai.actor_see( npc )
  then
    return true
  end

  return false
end


function item_inside_anomaly( item, storage, npc )
  if not item then return true end
  if not npc:accessible( item:level_vertex_id() ) then
    storage.disabled_objects[ item:id() ] = true
    storage.dest_lvid = nil
    claimed_pos[ item:level_vertex_id() ] = nil
    freeGObject( storage )
    return true
  end
  return false
end


-- Вызывает closure раз в period, obj[ var ] хранит время следующего
-- срабатывания
function timed( obj, var, period, closure )
  if obj[ var ] and obj[ var ] < time_global() then
    obj[ var ] = time_global() + period
    closure()
  elseif not obj[ var ] then
    obj[ var ] = time_global() + period
  end
end


function trigger_timed( obj, var )
  obj[ var ] = time_global()
end


-- true - has loot, false - hasn't loot, nil - not checked
local corpse_checked   = {}

function checkCorpse( obj )
  if corpse_checked[ obj:id() ] == nil then
    if ( IsStalker( obj ) or IsMonster( obj ) ) and not obj:alive() then
      local cnt = 0
      obj:iterate_inventory(
        function ( dummy, item )
          if item:section() ~= "bolt" then
            cnt = cnt + 1
          end
        end, nil
      )
      corpse_checked[ obj:id() ] = cnt > 0
    else
      corpse_checked[ obj:id() ] = false
    end
  end
  return corpse_checked[ obj:id() ]
end


function postmortem_sound( npc, body )
  if not ( npc and body ) then return end
  if
    sound_timer[ npc:id() ]
    and sound_timer[ npc:id() ] > time_global()
  then
    return
  end
  local snd_name
  if IsStalker( body ) then
    if npc:relation( body ) == game_object.friend then
      snd_name = dead_friend[ math.random( table.getn( dead_friend ) ) ]
    elseif npc:relation( body ) == game_object.neutral then
      snd_name = dead_neutral[ math.random( table.getn( dead_neutral ) ) ]
    elseif npc:relation( body ) == game_object.enemy then
      snd_name = dead_enemy[ math.random( table.getn( dead_enemy ) ) ]
    end
  elseif IsMonster( body ) then
    snd_name = dead_mutant[ math.random( table.getn( dead_mutant ) ) ]
  end
  if not snd_name then return end
  local snd_obj = xr_sound.get_safe_sound_object( snd_name )
  if snd_obj and not snd_obj:playing() then
    snd_obj:play_no_feedback( npc, sound_object.s3d, 0, npc:position(), 1.0 )
    sound_timer[ npc:id() ] = time_global() + math.random( 15000, 25000 )
  end
end


function bgwith( str, ptr )
  return string.find( str, ptr, 1, true ) ~= nil
end


function isValuable( obj )
  local sec = obj:section()
  if sec == "amk_metka" then
    return false, false
  end
  if valuable_clsid[ obj:clsid() ] then
    return true, false
  end
  return (
    bgwith( sec, "af_" )
    or bgwith( sec, "ammo_" )
    or bgwith( sec, "wpn_" )
    or bgwith( sec, "energy_" )
    or checkCorpse( obj )
  ), ( IsStalker( obj ) or IsMonster( obj ) )
end


function objValue( obj )
  local sec = obj:section()
  local multiplier = 1
  if bgwith( sec, "ammo_" ) then
    multiplier = 30
  elseif sec == "af_" then
    multiplier = 50
  elseif sec == "vodka" then
    multiplier = 20
  end
  return get_float( sec, "cost", 0 ) * multiplier
end


function claimGObject( npc, st, obj )
  if st.grabitemid then
    obj_owner[ st.grabitemid ] = nil
  end
  st.grabitemid = obj:id()
  obj_owner[ obj:id() ] = npc:id()
  claimed_pos[ obj:level_vertex_id() ] = npc:id()
end


function freeGObject( st )
  if st.grabitemid then
    obj_owner[ st.grabitemid ] = nil
    st.grabitemid = nil
  end
end


function clearGObject( st )
  st.grabitemid = nil
end


function getGObject( st, npc )
  if st.grabitemid then
    local obj = level.object_by_id( st.grabitemid )
    if obj and item_inside_anomaly( obj, st, npc ) then
      return nil
    end
    if not obj then st.grabitemid = nil end
    return obj
  end
end


function correct_position( gi, npc )
  if IsStalker( gi ) or IsMonster( gi ) then
    -- Вычисляем вектор разницы между координатами кости и level
    -- vertex. Пытаемся найти level vertex наиболее близкий к кости
    local real_vtx = gi:level_vertex_id()
    if npc:accessible( real_vtx ) then
      return real_vtx
    else
      local diff      = gi:bone_position( "bip01_spine" ):sub( gi )
      local lengt     = diff:magnitude() * 2.5
      local test_lvid = npc:vertex_in_direction( gi, diff, lengt )
      if npc:accessible( test_lvid ) then
        return test_lvid
      else
        return npc:accessible_nearest(
          level.vertex_position( test_lvid ), vector():set( 0, 0, 0 )
        )
      end
    end
  else
    return gi:level_vertex_id()
  end
end


class "ev_see_stuff" ( property_evaluator )
function ev_see_stuff:__init( st, name ) super( nil, name )
  self.st = st
end


function ev_see_stuff:check_item( obj, dist_limit, busy )
  local npc = self.object
  if obj and obj.clsid and alife():object( obj:id() ) then
    -- it's OK
  else
    -- else exit
    return
  end

  local owner_id = obj_owner[ obj:id() ]
  if owner_id then
    local owner = level.object_by_id( owner_id )
    if not ( owner and owner:alive() ) then
      obj_owner[ obj:id() ] = nil
    end
  end

  if
    ( not self.st.disabled_objects[ obj:id() ] )
    and ( obj:parent() == nil or not IsStalker( obj:parent() ) )
    and (
      obj_owner[ obj:id() ] == nil
      or obj_owner[ obj:id() ] == npc:id()
    )
    and npc:accessible( obj:level_vertex_id() )
    and (
      not (
        claimed_pos[ obj:level_vertex_id() ]
        and claimed_pos[ obj:level_vertex_id() ] ~= npc:id()
      )
    )
    and ( not item_inside_anomaly( obj, self.st, npc ) )
    and ( not do_not_touch( obj ) )
    and db.actor:position():distance_to( obj:position() ) >= 3
  then
    local valuable, corpse = isValuable( obj )
    if valuable then
      local value = 3000
      if not corpse then
        value = objValue( obj )
      end
      if value <= 0 then value = 0 end
      local max_dist = 5 + math.sqrt( value )
      if busy then max_dist = max_dist / 5 end
      local dist = level.vertex_position( obj:level_vertex_id() )
        :distance_to( npc:position() )
      local corrected_dist = dist
      if dist > 5 then
        corrected_dist = 5 + ( dist - 5 ) / math.sqrt( value )
      end
      if
        dist < max_dist
        and corrected_dist < self.st.min_dist
        and dist < dist_limit
      then
        self.st.min_dist = corrected_dist
        claimGObject( npc, self.st, obj )
        return
      end
    end
  end
end


function ev_see_stuff:evaluate()
  if
    ( not self.object:alive() )
    or xr_wounded.is_wounded( self.object )
    or has_alife_info( "pre_blowout" )
    or self.object:best_enemy()
  then
    return false
  end
  local npc = self.object
  local res = getGObject( self.st, npc ) ~= nil
  if bad_situation( npc ) then
    if res then
      local g_obj = getGObject( self.st, npc )
      claimed_pos[ g_obj:level_vertex_id() ] = nil
      freeGObject( self.st )
    end
    return false
  end
  if res then
    -- NPC собрался взять вещь. Временно прекратим поиск.
    ogse_debug.add_active_eval( self.object, script_name(), "ev_see_stuff" )
    return true
  end
  local dist_limit = 100
  local act_sec    = db.storage[ npc:id() ].active_section or ""
  if bgwith( act_sec, "camper" ) then
    dist_limit = 5
  end
  local busy = bgwith( act_sec, "walker" )
    or bgwith( act_sec, "combat" )
    or bgwith( act_sec, "danger" )
  timed(
    self.st, "tm1", 5000 + math.random() * 10000,
    function()
      if not self.st.block_search then
        -- непись намерен поискать вещь
        self.st.min_dist = 100000
        for o in npc:memory_visible_objects() do
          self:check_item( o:object(), dist_limit, busy )
        end
      end
    end
  )
  return false
end


class "ev_near_stuff" ( property_evaluator )
function ev_near_stuff:__init( st, name ) super( nil, name )
  self.st = st
end


function ev_near_stuff:evaluate()
  if
    ( not self.object:alive() )
    or xr_wounded.is_wounded( self.object )
    or has_alife_info( "pre_blowout" )
    or self.object:best_enemy()
  then
    return false
  end
  local npc = self.object
  local gi  = getGObject( self.st, npc )
  if gi then
    if gi:position():distance_to( npc:position() ) <= desired_distance then
      ogse_debug.add_active_eval( self.object, script_name(), "ev_near_stuff" )
      return true
    end
  end
  return false
end


class "act_reach_item" ( action_base )
function act_reach_item:__init( action_name, st ) super( nil, action_name )
  self.st = st
end


function act_reach_item:initialize()
  action_base.initialize( self )
  local npc = self.object
  local gi  = getGObject( self.st, npc )
  self.st.dest_lvid = nil
  if gi then
    npc:movement_enabled( true )
    self.st.dest_lvid = correct_position( gi, npc )
  end
  self.ct    = time_global()
  self.clvid = npc:level_vertex_id()
end


function act_reach_item:execute()
  action_base.execute( self )
  local npc = self.object
  local gi  = getGObject( self.st, npc )
  if gi and gi:parent() ~= nil then
    -- ГГ забрал вкусность. Можно добавить наезд на ГГ.
    self.st.dest_lvid = nil
    claimed_pos[ gi:level_vertex_id() ] = nil
    freeGObject( self.st )
  elseif gi then
    if self.clvid == npc:level_vertex_id() then
      if time_global() - self.ct > 7000 then
        -- не можем добраться до нняки
        self.st.disabled_objects[ gi:id() ] = true
        self.st.dest_lvid = nil
        claimed_pos[ gi:level_vertex_id() ] = nil
        freeGObject( self.st )
      end
    else
      self.clvid = npc:level_vertex_id()
      self.ct    = time_global()
    end
    local dist = npc:position():distance_to( gi:position() )
    if dist > desired_distance then
      self.st.dest_lvid = correct_position( gi, npc )
      npc:set_detail_path_type( move.curve )
      npc:set_path_type( game_object.level_path )
      npc:set_desired_direction()
      npc:set_desired_position()
      utils.send_to_nearest_accessible_vertex( npc, self.st.dest_lvid )
      if
        npc:best_danger()
        and time_global() - npc:best_danger():time() < inertion_time
      then
        if dist > 15 then
          state_mgr.set_state( npc, "patrol" )
        else
          state_mgr.set_state( npc, "sneak" )
        end
      else
        if dist > 15 then
          state_mgr.set_state( npc, "run" )
        else
          state_mgr.set_state( npc, "walk" )
        end
      end
    end
  end
end


function act_reach_item:finalize()
  action_base.finalize( self )
end


class "act_grab_item" ( action_base )
function act_grab_item:__init( action_name, st ) super( nil, action_name )
  self.st = st
end


function act_grab_item:initialize()
  action_base.initialize( self )
  local npc = self.object
  local gi  = getGObject( self.st, npc )
  if gi then
    npc:set_desired_direction()
    npc:set_desired_position()
  end
  self.st.block_search = true
  self.st.rnd          = math.random()
  if gi then
    if IsStalker( gi ) or IsMonster( gi ) then
      self.tt = time_global() + 3000
      postmortem_sound( npc, gi )
    else
      self.tt = time_global() + 2200
    end
  else
    claimed_pos[ self.st.dest_lvid ] = nil
    self.st.dest_lvid = nil
    freeGObject( self.st )
  end
end


function act_grab_item:execute()
  action_base.execute( self )
  local npc = self.object
  local gi  = getGObject( self.st, npc )
  if not gi then
    if self.st and self.st.dest_lvid then
      claimed_pos[ self.st.dest_lvid ] = nil
      self.st.dest_lvid = nil
      freeGObject( self.st )
    end
    return
  end
  if self.tt > time_global() then
    -- поднятие анимировать нам надо
    if IsStalker( gi ) or IsMonster( gi ) then
      if IsStalker( gi ) then
        if self.st.rnd > 0.5 then
          state_mgr.set_state(
            npc, "obisk_trupa",  nil, nil, { look_object = gi }
          )
        else
          state_mgr.set_state(
            npc, "obisk_trupa_2", nil, nil, { look_object = gi }
          )
        end
      else
        state_mgr.set_state( npc, "search", nil, nil, { look_object = gi } )
      end
    else
      state_mgr.set_state( npc, "dynamite", nil, nil, { look_object = gi } )
    end
  else
    -- поднимаем
    if gi and gi:parent() == nil and not do_not_touch( gi ) then
      if IsStalker( gi ) or IsMonster( gi ) then
        gi:iterate_inventory(
          function ( d, item )
            if item:section() ~= "bolt" and not do_not_touch( item ) then
              gi:transfer_item( item, npc )
              if gi:is_outfit() then
                amkii_equip.CAmkDisguise():Update( npc, gi )
              end
            end
          end, nil
        )
        corpse_checked[ gi:id() ] = false -- нет больше лута тут
      else
        gi:transfer_item( gi, npc )
        npc:enable_memory_object( gi, false )
        if gi:is_outfit() then
          amkii_equip.CAmkDisguise():Update( npc, gi )
        end
      end
      claimed_pos[ gi:level_vertex_id() ] = nil
      obj_owner[ gi:id() ] = nil
    end
    if gi and not ( IsStalker( gi ) or IsMonster( gi ) ) then
      self.object:clear_animations()
      state_mgr.set_state(
        npc, "sneak_no_wpn", nil, nil, nil, { animation = true }
      )
    end
    -- *голосом мастера Йода* объект нельзя освобождать тут нам,
    -- *асинхронно transfer_item выполняется, clearGObject делаем
    -- *поэтому
    clearGObject( self.st )
  end
end


function act_grab_item:finalize()
  local npc = self.object
  self.st.block_search = nil
  trigger_timed( self.st, "tm1" )
  self.st.dest_lvid = nil -- Очищаем скорректированную точку назначения
  action_base.finalize( self )
end


evid_see_stuff   = 6931
evid_near_stuff  = evid_see_stuff + 1

actid_reach_item = evid_see_stuff + 2
actid_grab_item  = evid_see_stuff + 3


function add_to_binder( object, char_ini, scheme, section, st )
  local npc = object
  st.disabled_objects = {}

  local state_mgr_to_idle_combat = xr_actions_id.state_mgr + 1
  local state_mgr_to_idle_alife  = xr_actions_id.state_mgr + 2
  local zombi   = npc:character_community() == "zombied"
    or npc:character_community() == "trader"
    or npc:character_community() == "arena_enemy"
    or npc:name() == "mil_stalker0012"
    or npc:name() == "yantar_ecolog_general"
    or npc:name() == "mil_freedom_member0021"

  -- Evaluators
  local manager = object:motivation_action_manager()
  local no_loot = utils.cfg_get_bool( char_ini, section, "no_loot", npc, false )
  if
    is_quest_npc( npc )
    or no_loot
    or protected_items.is_no_offline_alife_npc( npc:section() )
    or zombi
  then
    manager:add_evaluator( evid_see_stuff,  property_evaluator_const( false ) )
    manager:add_evaluator( evid_near_stuff, property_evaluator_const( false ) )
  else
    manager:add_evaluator(
      evid_see_stuff, ev_see_stuff( st, "ev_see_stuff" )
    )
    manager:add_evaluator(
      evid_near_stuff, ev_near_stuff( st, "ev_near_stuff" )
    )

    -- Actions
    local action = act_reach_item( "act_reach_item", st )
    action:add_precondition(
      world_property( stalker_ids.property_alive, true )
    )
    action:add_precondition(
      world_property( stalker_ids.property_enemy, false )
    )
    action:add_precondition(
      world_property( xr_evaluators_id.sidor_wounded_base, false )
    )
    action:add_precondition(
      world_property( blowout_scheme.evid_blowout, false )
    )
    if xrs_ai then xrs_ai.addCommonPrecondition( action ) end
    if rx_ai  then  rx_ai.addCommonPrecondition( action ) end
    action:add_precondition( world_property( evid_near_stuff, false ) )
    action:add_precondition( world_property( evid_see_stuff,  true  ) )
    action:add_effect( world_property( evid_see_stuff, false ) )
    manager:add_action( actid_reach_item, action )

    action = act_grab_item( "act_grab_item", st )
    action:add_precondition(
      world_property( stalker_ids.property_alive, true )
    )
    action:add_precondition(
      world_property( stalker_ids.property_enemy,false )
    )
    action:add_precondition(
      world_property( blowout_scheme.evid_blowout, false )
    )
    if xrs_ai then xrs_ai.addCommonPrecondition( action ) end
    if rx_ai  then  rx_ai.addCommonPrecondition( action ) end
    action:add_precondition( world_property( evid_near_stuff, true ) )
    action:add_effect( world_property( evid_near_stuff, false ) )
    manager:add_action( actid_grab_item, action )

    action = manager:action( stalker_ids.action_alife_planner )
    action:add_precondition( world_property( evid_see_stuff,  false ) )
    action:add_precondition( world_property( evid_near_stuff, false ) )

    action = manager:action( state_mgr_to_idle_alife )
    action:add_precondition( world_property( evid_see_stuff,  false ) )
    action:add_precondition( world_property( evid_near_stuff, false ) )
  end
end


function set_scheme( npc, ini, scheme, section )
  local st = xr_logic.assign_storage_and_bind( npc, ini, scheme, section )
  st.ini = ini
end
