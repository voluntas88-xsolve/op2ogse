-- -*- mode: lua; coding: windows-1251-dos -*-

function init( obj )
  local new_binder = ggun_binder( obj )
  obj:bind_object( new_binder )
end


function nobind( obj )
end


class "ggun_binder" (object_binder)
function ggun_binder:__init( obj ) super( obj )
end


function ggun_binder:reload( section )
  object_binder.reload( self, section )
  self.ammo_max         = get_u32( section, "ammo_mag_size" )
  self.impulse_max      = get_u32( section, "hit_impulse"   )
  self.particle_hold    = particles_object( [[weapons\group_items\flame_center]] )
  self.particle_fire    = particles_object( [[weapons\group_items\rpg7_rocket_glow]] )
  self.sound_hold       = sound_object( [[weapons\gravigun\gravigun_hold]] )
  self.sound_fire       = sound_object( [[weapons\gravigun\gravigun_fire]] )
  self.sound_open       = sound_object( [[weapons\gravigun\gravigun_open]] )
  self.sound_close      = sound_object( [[weapons\gravigun\gravigun_close]] )
  self.sound_pickup     = sound_object( [[weapons\gravigun\gravigun_pickup]] )
  self.sound_drop       = sound_object( [[weapons\gravigun\gravigun_drop]] )
  self.sound_nohold     = sound_object( [[weapons\gravigun\gravigun_nohold]] )
  self.sound_nofire     = sound_object( [[weapons\gravigun\gravigun_nofire]] )
  self.nofire_stop_time = 0
end


function ggun_binder:net_spawn( data )
  if not object_binder.net_spawn( self, data ) then
    return false
  end
  self.lbutton_pressed   = false
  self.rbutton_pressed   = false
  self.first_update      = true
  self.last_ammo_elapsed = 0
  self.last_accuracy     = 0
  self.last_in_slot      = false

  return true
end


function ggun_binder:update( delta )
  object_binder.update( self, delta )
  local ammo_elapsed = self.object:get_ammo_in_magazine()
  local accuracy     = db.actor:accuracy()
  --позици€ партиклов и звуков
  local pos = vector()
  pos:mad( device().cam_pos, device().cam_dir, 0.75 )
  pos:mad( pos, device().cam_top,   -0.3 )
  pos:mad( pos, device().cam_right,  0.3 )
  self.gun_end_pos = vector():set( pos.x, pos.y, pos.z )

  if self.first_update then
    self.first_update      = false
    self.last_ammo_elapsed = ammo_elapsed
    self.last_accuracy     = accuracy
    return
  end

  -- генерируем событи€ вз€ти€ в руки и убирани€
  local active_item = db.actor:active_item()
  local qwerty      = active_item and self.object:id() == active_item:id()
  if qwerty then
    if not self.last_in_slot then -- только вз€ли
      self.last_in_slot = true
      self:OnTake()
    else -- просто держим
      self:OnHold( delta )
    end
  else
    if self.last_in_slot then   -- только убрали
      self.last_in_slot = false
      self:OnRemove()
    end
    return                      -- больше ничего не делаем
  end

  if
    has_alife_info( "no_gravigun" )
    or has_alife_info( "ui_inventory" )
    or (
      has_alife_info( "snp_vesker_start_done" )
        and not has_alife_info( "snp_profi_done" )
    )
  then
    -- запрет на использование - все отпускаем
    if self.lbutton_pressed then
      self:OnLButtonUp()
      self.lbutton_pressed = false
    end
    if self.rbutton_pressed then
      self:OnRButtonUp()
      self.rbutton_pressed = false
    end
  else
    -- ќпредел€ем что делаем с левой кнопокой мыши
    local da = self.last_ammo_elapsed - ammo_elapsed
    if da > 0 then          -- это либо первое нажатие, либо удержание
      if not self.lbutton_pressed then -- первое нажатие
        self:OnLButtonDown()
        self.lbutton_pressed = true
      else                      -- удерживание
        self:OnLButtonHold( delta )
      end
    elseif self.lbutton_pressed then -- отпускание
      self:OnLButtonUp()
      self.lbutton_pressed = false
    end
    self.last_ammo_elapsed = ammo_elapsed
    ---- јналогично отрабатываем дл€ правой кнопки мыши ---------
    if accuracy * 1000 < 1 then -- это либо первое нажатие, либо удержание
      if not self.rbutton_pressed then -- первое нажатие
        self:OnRButtonDown()
        self.rbutton_pressed = true
      else                      -- удерживание
        self:OnRButtonHold( delta )
      end
    elseif self.rbutton_pressed then -- отпускание
      self:OnRButtonUp()
      self.rbutton_pressed = false
    end
  end

  -- отслеживаем положение партиклов в fastcall-е, update отработать
  -- не успевает
  self.object:set_fastcall( self.sound_particle_fastcall, self )

  -- отслеживаем судьбу брошенного из захвата объекта
  if self.thrown then
    self:track_thrown()
  end
end


local ggunable  = {}
function ggun_binder:net_destroy()
  self.rbutton_pressed = false
  self.lbutton_pressed = false
  self:HideCrosshair()
  ggunable = {}
  object_binder.net_destroy( self )
end


function ggun_binder:net_save_relevant()
  return true
end


function ggun_binder:sound_particle_fastcall()
  if self.rbutton_pressed or self.lbutton_pressed then
    local pos = vector()
    pos:mad( device().cam_pos, device().cam_dir, 0.75 )
    pos:mad( pos, device().cam_top,   -0.3 )
    pos:mad( pos, device().cam_right,  0.3 )
    self.gun_end_pos = vector():set( pos.x, pos.y, pos.z )

    if self.sound_hold:playing() then
      self.sound_hold:set_position( self.gun_end_pos )
    end
    if self.sound_fire:playing() then
      self.sound_fire:set_position( self.gun_end_pos )
    end
    if self.sound_open:playing() then
      self.sound_open:set_position( self.gun_end_pos )
    end
    if self.sound_close:playing() then
      self.sound_close:set_position( self.gun_end_pos )
    end
    if self.sound_pickup:playing() then
      self.sound_pickup:set_position( self.gun_end_pos )
    end
    if self.sound_drop:playing() then
      self.sound_drop:set_position( self.gun_end_pos )
    end
    if self.sound_nohold:playing() then
      self.sound_nohold:set_position( self.gun_end_pos )
    end
    if self.sound_nofire:playing() then
      self.sound_nofire:set_position( self.gun_end_pos )
    end

    if self.particle_hold:playing() then
      self.particle_hold:stop()
      self.particle_hold:play_at_pos( self.gun_end_pos )
    end
    if self.particle_fire:playing() then
      self.particle_fire:move_to(
        self.gun_end_pos, vector():set( 0, 0, 0 )
      )
    end
    return false
  else
    if self.particle_hold:playing() then
      self.particle_hold:stop()
      if time_global() < self.nofire_stop_time then
        self.particle_hold:play_at_pos( self.gun_end_pos )
        return false
      end
    end
    return true
  end
end


function ggun_binder:OnRButtonDown( no_sound ) -- was L
  ggunable = {}
  if not no_sound then
    self.block_nohold = nil
    if not self.sound_open:playing() then
      self.sound_open:play_at_pos( db.actor, self.gun_end_pos )
    end
  else
    self.block_nohold = true
  end

  if not self.particle_hold:playing() then
    self.particle_hold:play_at_pos( self.gun_end_pos )
  end

  -- ищем цель: онлайновый объект с физической оболочкой в радиусе
  -- захвата и в конусе взгл€да
  for id = 1, 65534 do
    local cobj = level.object_by_id( id )
    if cobj then                -- есть онлайновый объект
      local ps = cobj:get_physics_shell()
      if ps and cobj:mass() < 1000 then -- есть оболочка
        ggunable[ id ] = true
      end
    end
  end
end


function ggun_binder:capture( cone, dist )
  -- на деле - cos угла захвата на дистанции dist
  if not cone then cone = 0.999 end
  if not dist then dist = 13    end -- дистанци€ захвата
  local back = 2          --  смещение конуса захвата за спину актора.
  dist = dist + back
  local capt_id, capt_obj
  local dist_min = 1.2 * dist
  local cone_max = 0.8 * cone
  for id, v in pairs( ggunable ) do
    local cobj = level.object_by_id( id )
    if cobj and cobj:get_physics_shell() then
      local rvec = cobj:center():sub(
        device().cam_pos:mad( device().cam_dir, -2.0 )
      )
      local r = rvec:magnitude()
      if r < 1.1 * dist and r > back + 1 then
        -- в радиусе захвата, но перед актором
        local proj  = rvec:dotproduct( device().cam_dir )
        local cos_a = proj / r
        if cos_a > cone then    -- попадает в конус прицеливани€
          if cos_a >= cone_max and r < dist_min then 
            -- если предмет хот€ бы не дальше от оси прицеливани€, чем
            -- предыдущий выбранный, но ближе по рассто€нию, то
            -- выбираем его
            dist_min = r
            cone_max = cos_a
            capt_id  = id
            capt_obj = cobj
          end
        end
      end
    else
      ggunable[ id ] = nil
    end
  end
  if capt_id and capt_obj then -- если выбрали подход€щий объект дл€ захвата
    self.target    = capt_obj  -- запомнили
    self.target_id = capt_id   -- запомнили id
    self.capture_nomove_counter = 3
    capt_obj:set_const_force(
      vector():set( 0, 1, 0 ), capt_obj:mass() * 19.62, 65535 * 65535
    )
  else
    if not self.sound_nohold:playing() then
      if not self.block_nohold then
        self.sound_nohold:play_at_pos( db.actor, self.gun_end_pos )
        self.block_nohold = true
      end
    end
  end
end


function ggun_binder:OnRButtonHold( delta ) -- was L
  if self.captured then
    if not self.sound_pickup:playing() then
      if not self.sound_hold:playing() then
        self.sound_hold:play_at_pos( db.actor, self.gun_end_pos, 0, 1 )
      end
    end
  end

  if not self.particle_hold:playing() then
    self.particle_hold:play_at_pos( self.gun_end_pos )
  end

  if not self.target then
    self:capture( 0.999, 13 )
  end

  if self.target then
    if not level.object_by_id( self.target_id ) then
      -- «ащита от зависани€ биндера при исчезновении захваченного
      -- грави-пушкой объекта (взорвавша€с€ бочка, исчезнувший от
      -- времени обломок €щика и т.п.)
      ggunable[ self.target_id ] = nil
      self.target    = nil
      self.target_id = nil
      return
    end
    local ps = self.target:get_physics_shell()
    if not ps then
      -- защита от вылета при вз€тии захваченного предмета в инвентарь √√
      self:OnRButtonUp()
      return
    end
    if vector():set( 0, -1, 0 ):dotproduct( device().cam_dir ) > 0.96 then
      -- «ащита от приподнимани€ объектом
      self:OnRButtonUp()
      return
    end
    if self.target_id == self.thrown then
      self.thrown = nil
      last_lvel   = nil
      last_avel   = nil
    end
    local current_velocity = vector()
    ps:get_linear_vel( current_velocity )
    -- сейчас моделируем ситуацию близкого захвата, когда предмет
    -- должен бузусловно находитс€ в "фокусе" гравипушки
    local aim_pos = device().cam_pos:mad( device().cam_dir, 2.0 ) -- точка назначени€
    -- вектор от текущей позиции к точке назначени€
    local rvec    = aim_pos:sub( self.target:center() )
    local r       = rvec:magnitude() -- его длина
    if
      ( not self.captured )
      and (
        r < 0.5
        or device().cam_pos:distance_to_sqr( self.target:center() ) < 5
      )
    then
      -- если объект в первый раз подошел к точке удержани€, считаем его захваченным 
      self.captured = true
      if not self.sound_pickup:playing() then
        self.sound_pickup:play_at_pos( db.actor, self.gun_end_pos )
      end
    end
    -- надо дать такой пинок, чтобы при следуюшем апдейте объект очутилс€ в точке назначени€
    -- может стоит ограничить скорость. ѕосмотрим...
    -- скорость, которую даЄт пинок считаем по формуле
    -- V = <импульс>/<масса>
    -- с другой стороны скорость должна быть равна
    -- V = r / dt
    -- здесь r - вектор перемещени€
    -- dt - врем€. ѕриравн€ем его к интервалу апдейта
    -- <импульс>/<масса> = r / dt    ==>     <импульс> = <масса> * r / dt
    -- даЄм небольшую инерционность - запас на погрешность временного шага
    local impulse = rvec:mul( 0.7 * self.target:mass() / ( 1e-3 * delta ) )
    -- теперь надо рассчитать текущий импульс
    local current_impulse = current_velocity:mul( self.target:mass() )
    -- результирующий импульс будет разницей между нужным и текущим
    local result_impulse = impulse:sub( current_impulse ):mul( 100 )
    local imp = result_impulse:magnitude()
    local imp_cap = self.impulse_max * r * self.target:mass() / 100
    if not self.captured then
      -- если объект еще не захвачен, подт€гиваем осторожно, чтобы не
      -- получить им по башке
      local vel = vector()
      ps:get_linear_vel( vel )
      local vm    = vel:magnitude()
      local vel_n = vector():set( vel.x, vel.y, vel.z ):dotproduct( device().cam_dir )
      -- проверка на скорость:  если цель не в фокусе захвата
      if imp > imp_cap then     -- ускор€ем, но аккуратно
        result_impulse:set_length( imp_cap )
      end
      if vel_n < -15 then
        -- ограничение скорости во избежание самовыноса захваченным
        -- объектом
        local break_impulse = device().cam_dir:mul(
            -1 * vel_n * result_impulse:magnitude() / vm
        )
        result_impulse:add( break_impulse )
      end
      -- проверка на неподвижность: если цель не в фокусе захвата и
      -- почти неподвижна, значит, во что-то уперлась.
      if vm < 0.5 then
        self.capture_nomove_counter = self.capture_nomove_counter - 1
      else
        self.capture_nomove_counter = 3
      end
      -- проверка на срыв захвата: если не захваченна€ до конца цель
      -- уперлась, и давно - сбросить захват
      if self.capture_nomove_counter == 0 then
        self.target:set_const_force(
          vector():set( 0, 1, 0 ), -self.target:mass() * 19.62, 65535 * 65535
        )
        ggunable[ self.target_id ] = nil
        self.target       = nil
        self.target_id    = nil
        self.block_nohold = nil
      end
    end
    ps:apply_force( result_impulse.x, result_impulse.y, result_impulse.z )
  end                           -- if self.target ...
end                             -- ggun_binder:OnLButtonHold


function ggun_binder:OnRButtonUp() -- was L
  if self.sound_hold:playing() then
    self.sound_hold:stop_deffered()
  end
  if not self.sound_close:playing() then
    self.sound_close:play_at_pos( db.actor, self.gun_end_pos )
  end

  if self.particle_hold:playing() then
    self.particle_hold:stop()
  end

  if self.captured then
    self.captured = nil
    if not self.sound_drop:playing() then
      self.sound_drop:play_at_pos( db.actor, self.gun_end_pos )
    end
  end

  if self.target then        -- если при отпускании есть что отпускать
    -- вернули силу т€жести, не забыть потом ввести флажок
    -- включЄнности с.т.  поскольку цель может и быть захвачена, но
    -- сила т€жести будет включатьс€ только с определЄнного рассто€ни€
    self.target:set_const_force(
      vector():set( 0, 1, 0 ), -self.target:mass() * 19.62, 65535 * 65535
    )
    self.target = nil
  end
end


function ggun_binder:OnLButtonDown() -- was R
  if self.captured then
    self.captured = nil
  end
  if self.target then
    self.target:set_const_force(
      vector():set( 0, 1, 0 ), -self.target:mass() * 19.62, 65535 * 65535
    )
    local ps      = self.target:get_physics_shell()
    local impulse = device().cam_dir:mul( self.target:mass() * 5000 )
    ps:apply_force( impulse.x, impulse.y, impulse.z )
    self.pulse      = impulse
    self.thrown     = self.target_id
    self.throw_time = time_global()
    ggunable[ self.target_id ] = nil
    self.target     = nil
    self.target_id  = nil
    self.sound_fire:play_at_pos( db.actor, self.gun_end_pos )
    self.particle_fire:play_at_pos( self.gun_end_pos )
  else
    if table.getn( ggunable ) == 0 then
      self:OnRButtonDown( 0 )
    end
    self:capture( 0.99, 4 )
    if self.target then
      self.target:set_const_force(
        vector():set( 0, 1, 0 ), -self.target:mass() * 19.62, 65535 * 65535
      )
      local ps      = self.target:get_physics_shell()
      local impulse = device().cam_dir:mul( self.target:mass() * 5000 )
      ps:apply_force( impulse.x, impulse.y, impulse.z )
      self.target    = nil
      self.target_id = nil
      self.particle_fire:play_at_pos( self.gun_end_pos )
      self.sound_fire:play_at_pos( db.actor, self.gun_end_pos )
    else
      self.nofire_stop_time = time_global() + 100
      self.sound_nofire:play_at_pos( db.actor, self.gun_end_pos )
    end
  end
end


function ggun_binder:OnLButtonHold(delta) -- was R
end


function ggun_binder:OnLButtonUp() -- was R
end


function ggun_binder:OnTake()
  self:ShowCrosshair()
end


function ggun_binder:OnHold( delta )
  local ammo = self.object:get_ammo_in_magazine()
  if ammo < self.ammo_max then ammo = ammo + 1 end
  self.object:set_ammo_elapsed( ammo )
end


function ggun_binder:OnRemove()
  self.rbutton_pressed = false
  self.lbutton_pressed = false
  self:HideCrosshair()
end


function ggun_binder:track_thrown()
  if self.thrown then
    local obj = level.object_by_id( self.thrown )
    if obj then
      local pos  = obj:position()
      local dist = pos:distance_to( device().cam_pos )
      if not check_on_level( pos ) then -- ≈сли объект улетел за пределы уровн€,
        -- удал€ем его от греха подальше
        alife():release( alife():object( self.thrown ), true )
      end
      local ps = obj:get_physics_shell()
      if ps then
        if self.throw_time and ( time_global() > self.throw_time + 500 ) then
          -- возвращаем брошенный предмет в список захватываемых
          ggunable[ self.thrown ] = true
          self.throw_time = nil
          if
            ( not string.find( obj:section(), "explosive" ) )
            and not string.find( obj:section(), "af_" )
          then
            -- если при ударе ничего особенного не должно
            -- происходить,то и следить за предметом дальше незачем
            self.thrown     = nil
            self.throw_time = nil
            self.last_lvel  = nil
            self.lvel       = nil
            self.last_avel  = nil
            self.avel       = nil
            return
          end
        end
        self.lvel = vector()
        ps:get_linear_vel( self.lvel )
        self.avel = vector()
        ps:get_angular_vel( self.avel )
        if not self.last_lvel or not self.last_avel then
          self.last_lvel = self.pulse
          self.last_avel = self.avel
          return
        end
        local lvel_mag       = self.lvel:magnitude()
        local last_lvel_mag  = self.last_lvel:magnitude()
        local lvel_norm      = vector():set(
          self.lvel.x, self.lvel.y, self.lvel.z
        ):normalize()
        local last_lvel_norm = vector():set(
          self.last_lvel.x, self.last_lvel.y, self.last_lvel.z
        ):normalize()
        local avel_mag       = self.avel:magnitude()
        local last_avel_mag  = self.last_avel:magnitude()
        local avel_norm      = vector():set(
          self.avel.x, self.avel.y, self.avel.z
        ):normalize()
        local last_avel_norm = vector():set(
          self.last_avel.x, self.last_avel.y, self.last_avel.z
        ):normalize()
        local cos_l          = lvel_norm:dotproduct( last_lvel_norm )
        local cos_a          = avel_norm:dotproduct( last_avel_norm )
        -- ловим удар брошенного предмета обо что-либо.
        if cos_l < 0.86 or (cos_l < 0.99 and dist > 3) then
          -- основной показатель удара - изменение направлени€ вектора
          -- линейной скорости
          if
            ( cos_a < 0.99 and last_avel_mag ~= 0 and avel_mag ~= 0 )
            or ( last_avel_mag == 0 and avel_mag ~= 0 )
          then
            -- предохранитель от ложного срабатывани€: в верхней точке
            -- крутой навесной траектории направление линейной
            -- скорости сильно мен€етс€ без удара отслеживаем
            -- изменени€ угловой скорости. Ћибо врашени€ объекта не
            -- было (углова€ скорость = 0), но оно по€вилось либо
            -- направление угловой скорости заметно изменилось за
            -- короткое врем€ ( cos угла между старым вектором угловой
            -- скорости и новым < 0.99)
            local sect = obj:section()
            if string.find( sect, "explosive" ) then
              obj:explode()
            elseif
              db.artefacts[ obj:id() ]
              and not db.artefacts[ obj:id() ].handmade
            then
              af_activate( sect, obj:position(), self.thrown )
            end
            self.thrown     = nil
            self.throw_time = nil
            self.last_lvel  = nil
            self.lvel       = nil
            self.last_avel  = nil
            self.avel       = nil
            return
          end
        end
        self.last_lvel = self.lvel
        self.last_avel = self.avel
      end
    else
      self.thrown     = nil
      self.throw_time = nil
      self.last_lvel  = nil
      self.lvel       = nil
      self.last_avel  = nil
      self.avel       = nil
      return
    end
  else
    self.thrown     = nil
    self.throw_time = nil
    self.last_lvel  = nil
    self.lvel       = nil
    self.last_avel  = nil
    self.avel       = nil
    return
  end
end


function check_on_level( pos )
  if pos.y > level.get_bounding_volume().min.y then
    return true
  else
    return false
  end
end


local crosshair
function ggun_binder:ShowCrosshair()
  local ar = device().aspect_ratio
  if not crosshair then
    local scale_x = 32
    local scale_y = math.floor( scale_x * 0.8 / ar )
    crosshair = CUIStatic()
    crosshair:Init( 513 - scale_x / 2, 385 - scale_y / 2, scale_x, scale_y )
    crosshair:InitTexture( "wpn\\gravigun\\crosshair" )
    crosshair:SetStretchTexture( true )
    get_hud():AddDialogToRender( crosshair )
  end
end


function ggun_binder:HideCrosshair()
  if crosshair then
    get_hud():RemoveDialogToRender( crosshair )
    crosshair = nil
  end
end


----------------------------- ј “»¬ј÷»я ј–“ќ¬ √–ј¬»-ѕ”Ў ќ…
function af_activate( sect, pos, id )
  local strng = get_string( "wpn_gravigun", sect )
  if not strng then return end
  local sobj = alife():object( id )
  if not sobj then return end
  local obj = level.object_by_id( sobj.id )
  if not obj then return end
  local anom_alias, anom_suffix = unpack( parse_names( strng ) )
  local params    = amk_anoms.get_anom_params( anom_alias )
  ASSERT( params, "unknown anomaly: %s", anom_alias )
  local anom_sect = "amk_zone_" .. params.zone .. "_" .. anom_suffix
  ASSERT( anom_sect, "unknown anomaly section: %s", anom_sect )
  local shapes, shape1 = {}, params.shape
  shapes[ 1 ] = {}
  shapes[ 1 ].shtype = shape1.shtype
  if shape1.shtype == 0 then
    shapes[ 1 ].radius = shape1.radius
    shapes[ 1 ].center = vector():set(
      shape1.center[ 1 ], shape1.center[ 2 ], shape1.center[ 3 ]
    )
  else
    shapes[ 1 ].v1     = vector():set(
      shape1.v1[ 1 ], shape1.v1[ 2 ], shape1.v1[ 3 ]
    )
    shapes[ 1 ].v2     = vector():set(
      shape1.v2[ 1 ], shape1.v2[ 2 ], shape1.v2[ 3 ]
    )
    shapes[ 1 ].v3     = vector():set(
      shape1.v3[ 1 ], shape1.v3[ 2 ], shape1.v3[ 3 ]
    )
    shapes[ 1 ].offset = vector():set(
      shape1.offset[ 1 ], shape1.offset[ 2 ], shape1.offset[ 3 ]
    )
  end
  dsh.timeout(
    5000,
    function()
      local res = amk_anoms.spawn_anomaly(
        anom_sect,
        pos, db.actor:game_vertex_id(), db.actor:level_vertex_id(),
        shapes, "on"
      )
      amk_anoms.add_anomaly( res.id, res.position, res.radius, res )
      dsh.mark_art_as_handmade( res, true )
    end
  )
  local part = get_string( anom_sect, "blowout_particles" )
  if part then
    local particle = particles_object( part )
    particle:play_at_pos( pos )
  end
  local snd = get_string( anom_sect, "blowout_sound" )
  if snd then
    local sound = sound_object( snd )
    sound:play_at_pos( level.object_by_id( id ), pos )
  end
  alife():release( sobj, true )
end
