-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_update", fun = this.on_update })
end


local cur_item = {}
function on_update()
  local item = db.actor:active_item()
  if not ( item and ( item:is_knife() or item:is_missile() ) ) then return end
  if ( not cur_item.sect ) or cur_item.sect ~= item:section() then
    local t = cur_item
    t.sect  = item:section()
    local hud_sect = get_string( t.sect, "hud" )
    t.anim_idle        = get_string( hud_sect, "anim_idle"        )
    t.anim_idle_moving = get_string( hud_sect, "anim_idle_moving" )
    t.anim_idle_sprint = get_string( hud_sect, "anim_idle_sprint" )
    t.hud_state        = item:get_hud_item_state()
    t.playing_anim     = "anim_idle"
    if item:is_missile() then
      t.state_idle  = weapon_states.fire2
      t.state_idle2 = weapon_states.switch
    else
      t.state_idle  = weapon_states.idle
      t.state_idle2 = nil
    end
  end
  local state = item:get_hud_item_state()
  if state ~= cur_item.hud_state then
    cur_item.hud_state    = state
    cur_item.playing_anim = "anim_idle"
  end
  if
    state == cur_item.state_idle
    or ( cur_item.state_idle2 and state == cur_item.state_idle2 )
  then
    local play_anim
    if item:is_knife() or item:is_missile() then
      if cur_item.anim_idle_sprint and db.actor:is_actor_sprinting() then
        play_anim = "anim_idle_sprint"
      elseif cur_item.anim_idle_moving and db.actor:is_actor_running() then
        if cur_item.state_idle2 and state == cur_item.state_idle2 then
          play_anim = cur_item.playing_anim
        else
          play_anim = "anim_idle_moving"
        end
      elseif cur_item.playing_anim then
        play_anim = "anim_idle"
      end
    end
    if play_anim and cur_item.playing_anim ~= play_anim then
      item:play_hud_animation( cur_item[ play_anim ], true )
      cur_item.playing_anim = play_anim
    end
  end
end
