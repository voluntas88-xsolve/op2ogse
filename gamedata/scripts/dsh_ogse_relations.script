-- -*- mode: lua; coding: windows-1251-dos -*-
-------------------------------------------------------------------------------
--| ogse_relations.script                                                   |--
--| Скриптовая обвязка для очистки отношений                                |--
--| K.D., OGS Evolution Team, 2015                                          |--
--| Ревизия: 14/03/2015                                                     |--
-------------------------------------------------------------------------------

function attach(sm) -- для менеджера сигналов
  sm:subscribe({ signal = "on_goodwill_change", fun = this.on_goodwill_change })
  sm:subscribe({ signal = "on_load", fun = this.load })
  sm:subscribe({ signal = "on_npc_spawn", fun = this.on_npc_spawn })
  sm:subscribe({ signal = "on_release_npc", fun = this.on_release })
  sm:subscribe({ signal = "on_save", fun = this.save })
end


local relation_seen  = {}
local relation_table = {}

function on_goodwill_change( from, to )
  if to == 0 then return end
  if not relation_seen[ to ] then relation_seen[ to ] = {} end
  if relation_seen[ to ][ from ] then
    -- log2(
    --   "[%s] REPEATED GOODWILL CHANGED FROM %s TO %s",
    --   script_name(), alife():object( from ):name(), alife():object( to ):name()
    -- )
  else
    if not relation_table[ to ] then
      relation_table[ to ] = {}
    end
    table.insert( relation_table[ to ], from )
    relation_seen[ to ][ from ] = true
    -- log1(
    --   "[%s] GOODWILL CHANGED FROM %s TO %s",
    --   script_name(), alife():object( from ):name(), alife():object( to ):name()
    -- )
  end
end


function on_release( npc_id )
  if not db.actor then return end
  if npc_id == 0 then return end
  -- log2( "[%s] NPC %s RELEASED", script_name(), npc_id )
  if relation_table[ npc_id ] then
    clear_personal_records( npc_id )
  end
end


function clear_personal_records( npc_id )
  local from_table = relation_table[ npc_id ]
  for _, id in ipairs( from_table ) do
    db.actor:clear_personal_record( id, npc_id )
    -- local sobj = alife():object( id )
    -- if sobj then
    --   log2(
    --     "[%s] RELATION RECORD CLEARED FOR OBJECT %s",
    --     script_name(), sobj:name()
    --   )
    -- else
    --   log2(
    --     "[%s] RELATION RECORD CLEARED FOR OBJECT WITH ID %s",
    --     script_name(), id
    --   )
    -- end
  end
  relation_seen[ npc_id  ] = nil
  relation_table[ npc_id ] = nil
end


function save()
  local records, cnt = {}, 0
  for k, items in pairs( relation_table ) do
    table.insert(
      records,
      {
        ( k == "actor" and 0 or k ),
        items,
      }
    )
    cnt = cnt + table.getn( items )
  end
  log2(
    "[%s]: RELATION TABLE SIZE IS %s: %s items",
    script_name(), table.getn( records ), cnt
  )
  ogse.save_var(
    script_name() .. ".records", records, "array_template",
    {
      "u16",
      { "array_template", { "u16" } },
    }
  )
end


function load()
  local records = ogse.load_var_safe( script_name() .. ".records" )
  if not records then return load_old() end
  log2(
    "[%s]: RELATION TABLE SIZE IS %s", script_name(), table.getn( records )
  )
  local cnt = 0
  for _, pk in ipairs( records ) do
    local to_id, items = unpack( pk )
    cnt = cnt + table.getn( items )
    -- log2(
    --   "[%s]: LOADING RELATION TABLE RECORD %s WITH SIZE %s",
    --   script_name(), to_id, table.getn( items )
    -- )
    if to_id == 0 then to_id = "actor" end
    relation_seen[ to_id  ] = {}
    relation_table[ to_id ] = {}
    for _, curr_id in ipairs( items ) do
      ASSERT(
        ( not relation_seen[ to_id ][ curr_id ] ),
        "FOUND SECOND RECORD TO %s FROM %s", to_id, curr_id
      )
      table.insert( relation_table[ to_id ], curr_id )
      relation_seen[ to_id ][ curr_id ] = true
      -- log2(
      --   "[%s]: LOADING RELATION TO %s FROM %s", script_name(), to_id, curr_id
      -- )
    end
  end
  log2( "[%s]: RELATION TABLE LOADED: %s items", script_name(), cnt )
end


function load_old()
  local old = ogse.load_var_safe( "dsh_ogse_relations" )
  if old then
    return load_old2( old )
  end
  local chunks = ogse.load_var_safe( script_name() .. ".chunks" )
  local cnt    = 0
  if chunks then
    log2( "[RELATIONS] RELATION TABLE SIZE IS %s", table.getn( chunks ) )
    for _, pk in ipairs( chunks ) do
      local to_id   = pk:r_u16()
      local to_size = pk:r_u16()
      cnt = cnt + to_size
--      log1(
--        "[RELATIONS] LOADING RELATION TABLE RECORD "
--          .. tostring( to_id ) .. " WITH SIZE " .. tostring( to_size )
--      )
      if to_id == 0 then
        to_id = "actor"
      end
      relation_seen[ to_id  ] = {}
      relation_table[ to_id ] = {}
      for j = 1, to_size do
        local curr_id = pk:r_u16()
        ASSERT(
          ( not relation_seen[ to_id ][ curr_id ] ),
          "[RELATIONS] FOUND SECOND RECORD TO %s FROM %s",
          tostring( to_id ), tostring( curr_id )
        )
        table.insert( relation_table[ to_id ], curr_id )
        relation_seen[ to_id ][ curr_id ] = true
--        log1(
--          "[RELATIONS] LOADING RELATION TO "
--            .. tostring( to_id ) .. " FROM " .. tostring( curr_id )
--        )
      end
    end
    log2( "[RELATIONS] RELATION TABLE LOADED: %s items!", cnt )
    ogse.delete_var( script_name() .. ".chunks" )
  end
end


function load_old2( pk )
  if pk then
    local table_size = pk:r_u16()
    log2( "[RELATIONS] OLD RELATION TABLE SIZE IS %s", tostring( table_size ) )
    for i = 1, table_size do
      local to_id   = pk:r_u16()
      local to_size = pk:r_u16()
--      log1(
--        "[RELATIONS] LOADING RELATION TABLE RECORD "
--          .. tostring( to_id ) .. " WITH SIZE " .. tostring( to_size )
--      )
      if to_id == 0 then
        to_id = "actor"
      end
      relation_seen[ to_id ] = {}
      relation_table[ to_id ] = {}
      for j = 1, to_size do
        local curr_id = pk:r_u16()
        ASSERT(
          ( not relation_seen[ to_id ][ curr_id ] ),
          "[RELATIONS] FOUND SECOND RECORD TO %s FROM %s",
          tostring( to_id ), tostring( curr_id )
        )
        table.insert( relation_table[ to_id ], curr_id )
        relation_seen[ to_id ][ curr_id ] = true
--        log1(
--          "[RELATIONS] LOADING RELATION TO "
--            .. tostring( to_id ) .. " FROM " .. tostring( curr_id )
--        )
      end
    end
    log1( "[RELATIONS] OLD RELATION TABLE LOADED!" )
    ogse.delete_var( "dsh_ogse_relations" )
  end
end


local attitude_neutal_threshold = get_float(
  "game_relations", "attitude_neutal_threshold"
)

local fix_rel_exceptions = {
  [ "crazy_doctor_npc"    ] = true, -- сумасшедший доктор в X-16
  [ "mil_dolg"            ] = true, -- группа Черепа
  [ "val_bandit_krisyk"   ] = true, -- Крысюк
  -- Гавр и телохранители
  [ "mil_trader_gavr"     ] = true,
  [ "mil_gavr_bodyguard1" ] = true,
  [ "mil_gavr_bodyguard2" ] = true,
  [ "mil_freedom_member0001" ] = true, -- стукач Павлик
  [ "mil_stalker0012"     ] = true, -- Псих на АС
}

local friends_comm = {
  [ "ecolog"  ] = true,
  [ "dolg"    ] = true,
  [ "freedom" ] = true,
  [ "green"   ] = true,
  [ "nebo"    ] = true,
  [ "stalker" ] = true,
  [ "trader"  ] = true,
}

function on_npc_spawn( npc, binder )
  if db.actor:character_community() ~= "actor" then return end
  local sobj = alife():object( npc:id() )
  if not sobj then return end
  local comm = npc:character_community()
  if not friends_comm[ comm ] then return end
  if
    fix_rel_exceptions[ npc:name() ]
    or fix_rel_exceptions[ npc:profile_name() ]
  then
    return
  end
  local strn_name = dsh_switch_distances.get_smart_terrain_name( sobj )
  if strn_name and fix_rel_exceptions[ strn_name ] then return end
  local p_gw = npc:goodwill( db.actor )
  if p_gw <= attitude_neutal_threshold then
    local c_gw = relation_registry.community_goodwill( comm, db.actor:id() )
    if
      c_gw >= attitude_neutal_threshold
      and (
        ( not relation_seen[ npc:id() ] )
        or ( not relation_seen[ npc:id() ][ db.actor:id() ] )
      )
    then
      npc:set_goodwill( 0, db.actor )
      npc:set_relation( game_object.neutral, db.actor )
    end
  end
end
