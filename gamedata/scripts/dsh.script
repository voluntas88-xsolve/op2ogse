-- -*- mode: lua; coding: windows-1251-dos -*-
local mobs_smart_terrain = {}

function attach( sm )
  sm:subscribe({ signal = "on_before_spawn", fun = this.on_before_spawn })
  sm:subscribe({ signal = "on_destroy",      fun = this.on_destroy      })
  sm:subscribe({ signal = "on_save",         fun = this.on_save         })
end

function init()
  event( "se_monster:on_before_register" ):register( this.se_on_before_register )
  event( "se_stalker:on_before_register" ):register( this.se_on_before_register )
end


function on_before_spawn()
  local build = ogse.load_var_safe( "dsh.build" )
  log2(
    "[%s]: [%s] loaded build: %s",
    script_name(), get_string_wq( "dsh.build", "build" ), tostring( build )
  )
  db.actor:disable_info_portion( "biznes_remove_special_item" )
  build_ru_upper_to_lower()
  load_kbd_keys()
  if is_input_time_inactivated() then
    level.disable_input()
  else
    level.enable_input()
  end
end


local kbd_keys = {}
function load_kbd_keys()
  local kv = get_section_keys_and_values( "dsh.kbd.keys" )
  for k, v in pairs( kv ) do
    kbd_keys[ k ] = DIK_keys[ v ]
  end
end

function get_kbd_key( k )
  return kbd_keys[ k ]
end


function on_save()
  ogse.save_var( "dsh.build", get_string_wq( "dsh.build", "build" ), "string" )
end


class "timeout_timer" ( ogse_qt.quick_timer )
function timeout_timer:__init( delay, fun, ... ) super( delay )
  self.fun  = fun
  self.args = { ... }
end
function timeout_timer:taction()
  self.fun( unpack( self.args ) )
end

function timeout( delay, fun, ... )
  local tmout = timeout_timer( delay, fun, ... )
  local d     = debug.getinfo( 2, "S" )
  if d then
    tmout.script_name = d.source
  end
  tmout:start()
  return tmout
end


class "condition_timer" ( ogse_qt.quick_timer )
function condition_timer:__init( fun1, fun2, fun3 )
  self.fun1 = fun1
  self.fun2 = fun2
  self.fun3 = fun3
end
function condition_timer:condition()
  return self.fun1()
end
function condition_timer:action()
  self.fun2()
end
function condition_timer:update()
  if self.fun3 then self.fun3() end
end

function wait_condition( ... )
  local tmout = condition_timer( ... )
  local d     = debug.getinfo( 2, "S" )
  if d then
    tmout.script_name = d.source
  end
  tmout:start()
  return tmout
end


class "exec_on_update_timer" ( ogse_qt.quick_timer )
function exec_on_update_timer:__init( fun, ... )
  self.fun  = fun
  self.args = { ... }
end
function exec_on_update_timer:condition()
  return true
end
function exec_on_update_timer:update()
  self.fun( unpack( self.args ) )
end

function exec_on_update( ... )
  local tmout = exec_on_update_timer( ... )
  local d     = debug.getinfo( 2, "S" )
  if d then
    tmout.script_name = d.source
  end
  tmout:start()
  return tmout
end


function set_condition( item, cond )
  local sobj = alife():object( item:id() )
  if sobj then
    local pk = get_netpk( sobj, 1 )
    if pk:isOk() then
      local data = pk:get()
      data.condition = cond
      pk:set( data )
    end
  end
  item:set_condition( cond )
end


-- http://www.amk-team.ru/forum/index.php?showtopic=6458&p=937442
--
-- local lname = level.name()
-- local lvtab = GetLevelVertexes( lname )
-- local lvx = math.max( unpack( lvtab ) )
-- local lv  = math_random( 1, lvx )
--
-- local gvtab  = GetGameVertexes( lname )
-- local gv_min = math.min( unpack( gvtab ) )
-- local gv_max = math.max( unpack( gvtab ) )
--
function GetLevelVertexes( level )
  local lvtab ={}
  local i = 0
  while game_graph():valid_vertex_id( i ) do
    local lv = game_graph():vertex( i ):level_vertex_id()
    local ln = alife():level_name( game_graph():vertex( i ):level_id() )
    if not lvtab[ ln ] then
      lvtab[ ln ] = {}
    end
    table.insert( lvtab[ ln ], lv )
    i = i + 1
  end
  return lvtab[ level ]
end

function GetGameVertexes( level )
  local gvtab ={}
  local i = 0
  while game_graph():valid_vertex_id( i ) do
    local ln = alife():level_name( game_graph():vertex( i ):level_id() )
    if not gvtab[ ln ] then
      gvtab[ ln ] = {}
    end
    table.insert( gvtab[ ln ], i )
    i = i + 1
  end
  return gvtab[ level ]
end


function is_enemy_around()
  for id in pairs( db.creature ) do
    if id then
      local obj = level.object_by_id( id )
      if obj and obj:is_custom_monster() and obj:alive() then
        local is_stalker = IsStalker(obj)
        local dist = obj:position():distance_to( db.actor:position() )
        local is_enemy_to_actor =
          ogse.get_npc_relation( obj, db.actor ) == "enemy"
        if
          ( ( is_stalker and is_enemy_to_actor ) or IsMonster( obj ) )
          and
          ( dist < 5 or obj:see( db.actor ) )
        then
          return true
        end
      end
    end
  end
  return false
end


-- http://www.amk-team.ru/forum/index.php?showtopic=10339&page=47#entry910319
function get_actor_values(type, cycle_length)
  if cycle_length then
    if type == "float" then
      get_console():execute("clear_log")
      for i = 1, cycle_length do
        local value = db.actor:get_actor_float(i)
        if value then log1("Float value = "..value.."; Position = "..i) end
      end
      flush_log()
    elseif type == "integer" then
      get_console():execute("clear_log")
      for i = 1, cycle_length do
        local value = db.actor:get_actor_int(nil, i)
        if value then log1("Integer value = "..value.."; Position = "..i) end
      end
      flush_log()
    end
  end
end

function get_actor_condition_values(cycle_length)
  get_console():execute("clear_log")
  for i = 1, cycle_length do
    local value = db.actor:get_actor_condition_float(i)
    if value then log1("Float value = "..value.."; Position = "..i) end
  end
  flush_log()
end


function remove_quotes( s )
  local  s2 = string.gsub( s, "[«»\"\']", "" )
  return s2
end


function strip_quotes( s )
  return string.gsub( s, "^%s*[«»\"\']+%s*(.+)%s*[«»\"\']+%s*$", "%1" )
end


function is_artefact( sect )
  return (
    string.find( sect, "^af_" )
    or get_bool( sect, "dsh_is_artefact", false )
  )
end


-- Список артефактов, которые можно сварить.
function get_creatable_arts()
  local arts = {}
  for anomaly, info in pairs( amk_mod.anom_recept_komp.anomalii ) do
    for info_key, recept in pairs( info.recepti ) do
      if recept.cel and recept.komp and not recept.remove_anomaly then
        local targets = {}
        local parts   = {}
        for k, _ in pairs( recept.cel  ) do
          ASSERT( not recept.komp[ k ], "found cel %s in komp", k )
          table.insert( targets, k )
        end
        for k, _ in pairs( recept.komp ) do
          ASSERT( not recept.cel[ k ], "found komp %s in cel", k )
          table.insert( parts, k   )
        end
        if
          table.getn( targets ) == 1
          and is_artefact( targets[ 1 ] )
          and table.getn( parts ) > 0
        then
          local tgt = targets[ 1 ]
          arts[ tgt ] = {
            [ "next" ] = {},
            [ "prev" ] = parts,
          }
        end
      end
    end
  end
  return arts
end


function get_art_levels()
  local arts = {}
  for k, v in pairs( get_creatable_arts() ) do
    if table.getn( v.prev ) == 1 then
      arts[ k ] = v
    end
  end

  for af, data in pairs( arts ) do
    local next_arts = { af }
    local process   = { data.prev[ 1 ] }
    while table.getn( process ) > 0 do
      local af_prev = table.remove( process, 1 )
      ASSERT( af ~= af_prev, "loop found: %s == %s", af, af_prev )
      if arts[ af_prev ] then
        if table.getn( arts[ af_prev ].next ) < table.getn( next_arts ) then
          arts[ af_prev ].next = {}
          for _, k in ipairs( next_arts ) do
            table.insert( arts[ af_prev ].next, k )
          end
        end
        table.insert( next_arts, 1, af_prev )
        table.insert( process,   arts[ af_prev ].prev[ 1 ] )
        table.insert( data.prev, arts[ af_prev ].prev[ 1 ] )
      end
    end
  end

  -- Для Симбиона сделано исключение. Т.к. он не является модификацией
  -- какого-то одного артефакта, он будет считаться артефактом первого
  -- уровня. Поэтому, принудительно сделаю его артефактом третьего
  -- уровня.
  if not arts[ "af_simbion" ] then
    arts[ "af_simbion" ] = {
      [ "next" ] = { "af_arhara_globus" },
      [ "prev" ] = { "", "" },
    }
  end

  return arts
end


function get_inv_item_weight( obj )
  return obj:get_inventory_item_float( 164 )
end

function set_inv_item_weight( obj, weight )
  obj:set_inventory_item_float( nil, weight, 164 )
end

function change_inv_item_weight( id, weight )
  local obj = level.object_by_id( id )
  if obj then
    local cur_weight = get_inv_item_weight( obj )
    set_inv_item_weight( obj, cur_weight + weight )
  end
end


function actor_get_art_nsimpliest( n )
  local arts = {}
  db.actor:iterate_inventory(
    function( npc, obj )
      if get_bool( obj:section(), "dsh.simpliest_art", false ) then
        if db.actor:is_in_ruck( obj ) then
          table.insert( arts, obj )
        end
      end
    end,
    db.actor
  )
  if table.getn( arts ) >= n then
    return arts
  end
end

function actor_has_art_nsimpliest( n )
  if actor_get_art_nsimpliest( n ) then return true else return false end
end

function actor_give_art_nsimpliest( n )
  local arts = actor_get_art_nsimpliest( n )
  if arts then
    for i = 1, n do
      local obj = table.remove( arts, 1 )
      ogse.remove_item_from_inventory( obj )
      news_manager.relocate_item( db.actor, "out", obj:section() )
    end
  end
end


function actor_has_art_simpliest()
  if actor_get_art_nsimpliest( 1 ) then return true else return false end
end

function actor_give_art_simpliest()
  return actor_give_art_nsimpliest( 1 )
end


function is_zone_bio_art( obj )
  return true
end


function actor_get_art_nsimpliest_bio( n )
  local arts = actor_get_art_nsimpliest( n )
  if arts then
    local bio = {}
    for _, obj in ipairs( arts ) do
      if is_zone_bio_art( obj ) then
        table.insert( bio, obj )
      end
    end
    if table.getn( bio ) >= n then
      return bio
    end
  end
end

function actor_has_art_nsimpliest_bio( n )
  if actor_get_art_nsimpliest_bio( n ) then return true else return false end
end

function actor_give_art_nsimpliest_bio( n )
  local arts = actor_get_art_nsimpliest_bio( n )
  if arts then
    for i = 1, n do
      local obj = table.remove( arts, 1 )
      ogse.remove_item_from_inventory( obj )
      news_manager.relocate_item( db.actor, "out", obj:section() )
    end
  end
end


function actor_has_art_simpliest_bio()
  return actor_has_art_nsimpliest_bio( 1 )
end

function actor_give_art_simpliest_bio()
  return actor_give_art_nsimpliest_bio( 1 )
end


function actor_has_art_2simpliest_bio()
  return actor_has_art_nsimpliest_bio( 2 )
end

function actor_give_art_2simpliest_bio()
  return actor_give_art_nsimpliest_bio( 2 )
end


function actor_has_art_3simpliest_bio()
  return actor_has_art_nsimpliest_bio( 3 )
end

function actor_give_art_3simpliest_bio()
  return actor_give_art_nsimpliest_bio( 3 )
end


function actor_get_art_nl0( n )
  local arts = {}
  for k, v in pairs( get_art_levels() ) do
    if table.getn( v.prev ) == 1 and table.getn( v.next ) > 0 then
      amk_utils.inventory_iterate_section(
        v.prev[ 1 ],
        function( obj )
          if db.actor:is_in_ruck( obj ) then
            table.insert( arts, obj )
            if table.getn( arts ) == n then return true end
          end
        end
      )
      if table.getn( arts ) == n then break end
    end
  end
  if table.getn( arts ) == n then return arts end
end

function actor_has_art_nl0( n )
  if actor_get_art_nl0( n ) then return true else return false end
end

function actor_give_art_nl0( n )
  local arts = actor_get_art_nl0( n )
  if arts then
    for i = 1, n do
      local obj = table.remove( arts, 1 )
      ogse.remove_item_from_inventory( obj )
      news_manager.relocate_item( db.actor, "out", obj:section() )
    end
  end
end


function actor_has_art_l0()
  return actor_has_art_nl0( 1 )
end

function actor_give_art_l0()
  return actor_give_art_nl0( 1 )
end


function actor_get_art_nl0_bio( n )
  local arts = actor_get_art_nl0( n )
  if arts then
    local bio = {}
    for _, obj in ipairs( arts ) do
      if is_zone_bio_art( obj ) then
        table.insert( bio, obj )
      end
    end
    if table.getn( bio ) >= n then
      return bio
    end
  end
end

function actor_has_art_nl0_bio( n )
  if actor_get_art_nl0_bio( n ) then return true else return false end
end

function actor_give_art_nl0_bio( n )
  local arts = actor_get_art_nl0_bio( n )
  if arts then
    for i = 1, n do
      local obj = table.remove( arts, 1 )
      ogse.remove_item_from_inventory( obj )
      news_manager.relocate_item( db.actor, "out", obj:section() )
    end
  end
end


function actor_has_art_l0_bio()
  return actor_has_art_nl0_bio( 1 )
end

function actor_give_art_l0_bio()
  return actor_give_art_nl0_bio( 1 )
end


function actor_has_art_2l0_bio()
  return actor_has_art_nl0_bio( 2 )
end

function actor_give_art_2l0_bio()
  return actor_give_art_nl0_bio( 2 )
end


function actor_has_art_3l0_bio()
  return actor_has_art_nl0_bio( 3 )
end

function actor_give_art_3l0_bio()
  return actor_give_art_nl0_bio( 3 )
end


function actor_get_art_check( f )
  for k, v in pairs( get_art_levels() ) do
    local found
    amk_utils.inventory_iterate_section(
      k,
      function( obj )
        if f( v ) and db.actor:is_in_ruck( obj ) then
          found = obj
          return true
        end
      end
    )
    if found then return found end
  end
end

function actor_get_art_abs()
  return actor_get_art_check(
    function( art )
      return ( table.getn( art.prev ) > 0 and table.getn( art.next ) == 0 )
    end
  )
end

function actor_has_art_abs()
  if actor_get_art_abs() then return true else return false end
end

function actor_give_art_abs()
  local obj = actor_get_art_abs()
  if obj then
    ogse.remove_item_from_inventory( obj )
    news_manager.relocate_item( db.actor, "out", obj:section() )
  end
end

function actor_get_art_ln( level )
  return actor_get_art_check(
    function( art )
      return ( table.getn( art.prev ) == level and table.getn( art.next ) > 0 )
    end
  )
end

function actor_has_art_l1()
  if actor_get_art_ln( 1 ) then return true else return false end
end

function actor_give_art_l1()
  local obj = actor_get_art_ln( 1 )
  if obj then
    ogse.remove_item_from_inventory( obj )
    news_manager.relocate_item( db.actor, "out", obj:section() )
  end
end

function actor_has_art_l2()
  if actor_get_art_ln( 2 ) then return true else return false end
end

function actor_give_art_l2()
  local obj = actor_get_art_ln( 2 )
  if obj then
    ogse.remove_item_from_inventory( obj )
    news_manager.relocate_item( db.actor, "out", obj:section() )
  end
end

function actor_has_art_l3()
  if actor_get_art_ln( 3 ) then return true else return false end
end

function actor_give_art_l3()
  local obj = actor_get_art_ln( 3 )
  if obj then
    ogse.remove_item_from_inventory( obj )
    news_manager.relocate_item( db.actor, "out", obj:section() )
  end
end


-- Заспаунить на АТП артефакты, которые требует Калинин, что бы рассказать о
-- переходе на Свалку.
function spawn_arts_for_kalinin()
  local arts = {
    "af_dummy_glassbeads",  -- мамины бусы
    "af_electra_moonlight", -- лунный свет
    "af_electra_flash",     -- вспышка
  }
  local radius = 200
  for _, sect in ipairs( arts ) do
    local prop = amk_utils.get_item_props( sect )
    if prop.has_af_dyn then
      sect = amk_anoms.make_dyn_art_sect( sect )
    end
    local sobj
    while not sobj do
      sobj = amk_anoms.generate_art(
        level.name(), sect, function( maybe_pos )
          if db.actor:position():distance_to( maybe_pos ) < radius then
            return false
          else
            return true
          end
        end
      )
    end
  end
end


local is_creating_free_mob = false
function se_on_before_register( e )
  local sobj = e.sobj
  if is_creating_free_mob then
    is_creating_free_mob = false
    set_none_smart_terrain( sobj )
  end
end

function set_none_smart_terrain( sobj )
  local pk = get_netpk( sobj, 1 )
  if pk:isOk() then
    local data = pk:get()
    local cd   = data.custom_data:getTable()
    if cd.smart_terrains then
      for k, _ in pairs( cd.smart_terrains ) do
        return
      end
    end
    cd.smart_terrains = {
      [ "none" ] = "true",
    }
    data.custom_data:set( cd )
    pk:set( data )
  end
end

-- Создать свободного моба, которого не затянет в какой-нибудь гулаг.
function create_free_mob( ... )
  is_creating_free_mob = true
  return alife():create( ... )
end

function create_free_monster( ... )
  return create_free_mob( ... )
end

function create_free_npc( ... )
  return create_free_mob( ... )
end


-- Условие, при котором будут выполняться модификации логики
-- гулагов. См. xr_gulag.script.
function is_gulag_fixes_enabled()
  return true -- alife():switch_distance() > 160
end


function actor_has_cnt_items( looking_sect, check_cnt_func )
  local cnt = 0
  for i = 0, db.actor:object_count() - 1 do
    local obj  = db.actor:object( i )
    local sect = obj:section()
    if looking_sect == sect then
      cnt = cnt + 1
      if check_cnt_func( cnt ) then return true end
    end
  end
  return false
end


function actor_has_conserva_ge_4()
  return actor_has_cnt_items(
    "conserva", function( cnt ) return cnt >= 4 end
  )
end


function actor_change_items( give_sect, give_num, take_sect, take_num )
  local give_objs = {}
  for i = 0, db.actor:object_count() - 1 do
    local obj  = db.actor:object( i )
    local sect = obj:section()
    if sect == give_sect then
      table.insert( give_objs, obj )
    end
  end
  local base_cnt = math.floor( table.getn( give_objs ) / give_num )
  local add_cnt  = base_cnt * take_num
  local del_cnt  = base_cnt * give_num
  if del_cnt > 0 then
    for _, obj in ipairs( give_objs ) do
      ogse.remove_item_from_inventory( obj )
      del_cnt = del_cnt - 1
      if del_cnt == 0 then break end
    end
    news_manager.relocate_item( db.actor, "out", give_sect )
  end
  if add_cnt > 0 then
    for i = 1, add_cnt do
      ogse.spawn_item_in_inv( take_sect )
    end
    news_manager.relocate_item( db.actor, "in",  take_sect )
  end
end


function actor_change_2conserva_1vodka()
  actor_change_items( "conserva", 2, "vodka", 1 )
end


function actor_has_energy_drink_ge_6()
  return actor_has_cnt_items(
    "energy_drink", function( cnt ) return cnt >= 6 end
  )
end


function actor_change_3energy_drink_1repair_item_outfit()
  actor_change_items( "energy_drink", 3, "repair_item_outfit", 1 )
end


function actor_has_bread_ge_10()
  return actor_has_cnt_items(
    "bread", function( cnt ) return cnt >= 10 end
  )
end


function actor_change_5bread_1repair_item_weapon()
  actor_change_items( "bread", 5, "repair_item_weapon", 1 )
end


function actor_change_5bread_1grenade_f1()
  actor_change_items( "bread", 5, "grenade_f1", 1 )
end


function actor_has_vodka_ge_2()
  return actor_has_cnt_items(
    "vodka", function( cnt ) return cnt >= 2 end
  )
end

function actor_has_vodka_ge_4()
  return actor_has_cnt_items(
    "vodka", function( cnt ) return cnt >= 4 end
  )
end


function actor_change_1vodka_2medkit_army()
  actor_change_items( "vodka", 1, "medkit_army", 2 )
end

function actor_change_2vodka_1medkit_army()
  actor_change_items( "vodka", 2, "medkit_army", 1 )
end


function actor_change_1vodka_1grenade_f1()
  actor_change_items( "vodka", 1, "grenade_f1", 1 )
end

function actor_change_2vodka_1grenade_f1()
  actor_change_items( "vodka", 2, "grenade_f1", 1 )
end


function actor_has_kolbasa_ge_4()
  return actor_has_cnt_items(
    "kolbasa", function( cnt ) return cnt >= 4 end
  )
end

function actor_has_kolbasa_ge_8()
  return actor_has_cnt_items(
    "kolbasa", function( cnt ) return cnt >= 8 end
  )
end


function actor_change_2kolbasa_1grenade_rgd()
  actor_change_items( "kolbasa", 2, "grenade_rgd5", 1 )
end

function actor_change_4kolbasa_1grenade_rgd()
  actor_change_items( "kolbasa", 4, "grenade_rgd5", 1 )
end


-- Проверить расстояние от гулага до ГГ, если меньше.
function gulag_distance_to_actor_lt( gulag_name, check_dist )
  if db.zone_by_name[ gulag_name ] then
    local sobj = alife():object( gulag_name )
    if sobj then
      local obj = level.object_by_id( sobj.id )
      if obj then
        local dist = obj:position():distance_to( db.actor:position() )
        return dist < check_dist
      end
    end
  end
  return false
end


-- Проверка, могут ли мутанты на АС начинать рейд на Барьер. Нужна для
-- того, что бы нападение начиналось не раньше, чем игрок дойдет до
-- Барьера. С увеличенным алайфом все это начинается слишком рано.
function lets_mil_monster_begin()
  return gulag_distance_to_actor_lt( "mil_monster", 250 )
end


-- 'string.lower' с поддержкой кириллицы.
-- взято из http://www.amk-team.ru/forum/index.php?showtopic=13216&p=959306
local ru_lower = [[йцукенгшщзхъфывапролджэячсмитьбюё]]
local ru_upper = [[ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁ]]
local ru_upper_to_lower = {}
function string_lower_ru( str )
  ASSERT( str, "str is nil" )
  local ret = ""
  for s in string.gmatch( string.lower( str ), "." ) do
    ret = ret .. ( ru_upper_to_lower[ s ] or s )
  end
  return ret
end

function build_ru_upper_to_lower()
  local l = {}
  for s in string.gmatch( ru_lower, "." ) do
    table.insert( l, s )
  end
  local i = 1;
  for s in string.gmatch( ru_upper, "." ) do
    ru_upper_to_lower[ s ] = l[ i ]
    i = i + 1
  end
end


function remember_mobs_smart_terrain( id, sobj, remember )
  if remember then
    mobs_smart_terrain[ id ] = sobj.id
  else
    mobs_smart_terrain[ id ] = nil
  end
end


function is_free_logic_mob( sobj )
  local strn_id
  if sobj.smart_terrain_id then
    strn_id = sobj:smart_terrain_id()
  else
    strn_id = 65535
  end
  if strn_id == 65535 then
    return mobs_smart_terrain[ sobj.id ]
  end
  return nil
end


function bar_priemnik_off()
  return ogse.save_var( "bar_priemnik.quiet", true, "bool" )
end
function bar_priemnik_on()
  return ogse.delete_var( "bar_priemnik.quiet" )
end


local ini_file_cache = {}
function cached_ini_file( fname )
  if not ini_file_cache[ fname ] then
    ini_file_cache[ fname ] = ini_file( fname )
  end
  return ini_file_cache[ fname ]
end


function start_gtimerDHMS( name, d, h, m, s, fname, ... )
  return ogse_st_mgr.delayed_fun_start( name )
    :set_gdelayDHMS( d, h, m, s )
    :init( fname, ... )
    :start()
end


function begin_af_transform( d, h, m, t )
  local result = {}
  for k, v in pairs( t.result ) do
    if dsh.is_artefact( k ) and not t.remove_anomaly then
      local prop = amk_utils.get_item_props( k )
      if prop.has_af_dyn then
        local rand_goods = math.floor(
          math.log( handmade_arts_cnt() / 1.7 )
        ) + 1
        if rand_goods > 5 then rand_goods = 5 end
        local rand_dyn = get_next_random(
          "dsh.begin_af_transform.rand_dyn", rand_goods
        )
        k = k .. "_dyn" .. rand_dyn .. "d"
      end
    end
    table.insert( result, k )
  end
  local from_komp = {}
  for k, v in pairs( t.komp ) do
    table.insert( from_komp, k )
  end
  start_gtimerDHMS(
    nil, d, h, m, 0,
    "dsh.end_af_transform",
    table.concat( result, "," ),
    t.udacha,
    t.pos.x, t.pos.y, t.pos.z, t.gv, t.lv,
    t.info_portion,
    table.concat( from_komp, "," ),
    t.remove_anomaly,
    t.remove_anomaly_id,
    level.name()
  )
  if table.getn( result ) > 0 and t.udacha and not t.remove_anomaly then
    local cnt = ogse.load_var( "dsh.begin_af_transform.cnt", 0 )
    ogse.save_var( "dsh.begin_af_transform.cnt", cnt + 1, "u32" )
    local tname = "dsh.begin_af_transform.cnt.reset"
    if ogse_st_mgr.timer_exists( tname ) then
      ogse_st_mgr.get_timer( tname ):stop()
    end
    ogse_st_mgr.delayed_fun_start( tname )
      :set_gdelayDHMS( d, h + math.random( 20 ), m, 0 )
      :init( "dsh.reset_af_transform_cnt" )
      :start()
  end
end

function reset_af_transform_cnt()
  ogse.delete_var( "dsh.begin_af_transform.cnt" )
end


function end_af_transform( result, udacha, x, y, z, gv, lv, info, komp, rm_anom, rm_anom_id, lname )
  local t = {
    [ "udacha" ] = udacha,
    [ "pos"    ] = {
      [ "x" ] = tonumber( x ),
      [ "y" ] = tonumber( y ),
      [ "z" ] = tonumber( z ),
    },
    [ "gv"     ] = tonumber( gv ),
    [ "lv"     ] = tonumber( lv ),
    [ "info_portion" ] = info,
    [ "remove_anomaly"    ] = rm_anom,
    [ "remove_anomaly_id" ] = tonumber( rm_anom_id ),
    [ "lname"  ] = lname,
  }
  if result then
    t.result = split_comma_separated_list( result )
  else
    t.result = {}
  end
  if komp then
    t.komp = split_comma_separated_list( komp )
  else
    t.komp = {}
  end
  local rand_goods = math.floor( math.log( handmade_arts_cnt() / 1.7 ) )
  if rand_goods > 4 then rand_goods = 4 end
  local sobj = amk_mod.af_transform_universal_end( t )
  if sobj and udacha and not rm_anom then
    sobj = alife():object( sobj.id )
    local pk = get_netpk( sobj, 1 )
    if pk:isOk() then
      local cnt  = ogse.load_var( "dsh.begin_af_transform.cnt", 1 )
      local rnd  = get_next_random( "dsh.end_af_transform.rnd" )
      local data = pk:get()
      data.condition    = ( rand_goods * 0.2 + rnd * 0.2 ) / cnt
      pk:set( data )
    end
    sobj:use_ai_locations( false )
  end
end


function is_this_monster_section( sect, monster_classes )
  local comm = get_string( sect, "community" )
  if
    comm
    and ( monster_classes[ comm ] or comm == "zombied" or comm == "rat" )
  then
    return true
  end
  return false
end


-- оставленно для совместимости, что бы не вылетело, если у кого-то
-- уже запущен этот таймер.
function spawn_all_respawners( next_id )
  spawn_dsh_respawners()
end


local spawn_dsh_respawners_list = {}

function spawn_dsh_respawners( next_name )
  if table.getn( spawn_dsh_respawners_list ) == 0 then
    local monsters = {}
    for k, v in pairs( smart_terrain.get_monster_classes() ) do
      monsters[ v ] = true
    end
    local found = false
    if not next_name then
      found = true
    end
    dsh_respawn.iterate_respawners(
      function( respawner )
        local first = respawner.respawn_section[ 1 ]
        if is_this_monster_section( first.section, monsters ) then
          if found then
            table.insert( spawn_dsh_respawners_list, respawner )
          elseif respawner.name == next_name then
            table.insert( spawn_dsh_respawners_list, respawner )
            found = true
          end
        end
      end
    )
  end
  local respawn = table.remove( spawn_dsh_respawners_list, 1 )
  respawn:do_refresh_spawned_obj()
  if table.getn( spawn_dsh_respawners_list ) > 0 then
    next_name = spawn_dsh_respawners_list[ 1 ].name
    ogse_st_mgr.start_timer( nil, 3, "dsh.spawn_dsh_respawners", next_name )
  end
end


function map_add_treasure( id, icon, text )
  local sobj = alife():object( id )
  if sobj then
    local spot
    if isIndoor( object_level_name( sobj ) ) then
      spot = icon
    else
      spot = "crlc_big_treasure" .. math.random( 1, 4 )
    end
    level.map_add_object_spot_ser( id, spot, text )
  end
end


function map_remove_treasure( id )
  level.map_remove_object_spot( id, "treasure" )
  for spot = 1, 4 do
    level.map_remove_object_spot( id, "crlc_big_treasure" .. spot )
  end
end


function map_has_treasure_spot( id )
  if level.map_has_object_spot( id, "treasure" ) > 0 then
    return true
  end
  for spot = 1, 4 do
    if level.map_has_object_spot( id, "crlc_big_treasure" .. spot ) > 0 then
      return true
    end
  end
  return false
end


function map_remove_treasure_inv( sect )
  amk_utils.inventory_iterate_section(
    sect,
    function( obj ) map_remove_treasure( obj:id() ) end
  )
end


function create_and_map_treasure( name, descr, sect, pos, lvid, gvid )
  local sobj = alife():create( sect, pos, lvid, gvid )
  local text = "%c[255,238,155,23]" .. name .. "\\n"
    .. "%c[default]" .. descr
  map_add_treasure( sobj.id, "treasure", text )
  return sobj
end


local fraer_task = {}
function is_fraer_task_failed()
  if not ( fraer_task.time and fraer_task.time > time_global() ) then
    local sobj = alife():object( "sim_stalker_fraer" )
    if sobj or has_alife_info( "prapor_talk_need" ) then
      fraer_task.res = false
    else
      fraer_task.res = true
    end
    fraer_task.time = time_global() + 10000
  end
  return fraer_task.res
end

function can_map_fraer()
  local sobj = alife():object( "sim_stalker_fraer" )
  if sobj then
    if level.map_has_object_spot( sobj.id, "blue_location" ) == 0 then
      return sobj
    end
  end
  return false
end

function take_fraer_spot()
  local sobj = can_map_fraer()
  if sobj then
    local pk = get_netpk( sobj, 1 )
    ASSERT( ( pk and pk:isOk() ), "can't read netpacket of %s", sobj:name() )
    local data = pk:get()
    level.map_add_object_spot_ser(
      sobj.id, "blue_location", data.character_name
    )
  end
end


function join_stalker_delayed( actor, npc )
  return ogse_st_mgr.delayed_fun_start( name )
    :set_delay( 3 )
    :init( "arhara_dialog.join_stalker" )
    :start( true )
end


function black_doc_exo_start_sms_delayed()
  news_manager.send_tip(
    db.actor,
    "%c[255,160,160,160]"
    .. "БОЛОТНЫЙ ДОКТОР:" .. "\\n"
    .. "%c[255,255,128,128]Стрелок, я решил вернуться в Припять. Если понадоблюсь, буду на прежнем месте.",
    nil, nil, 30000
  )
  if
    db.actor:has_info( "yan_scientist_books_done" )
    and db.actor:has_info( "tel_dcity_kanaliy" )
    and db.actor:dont_has_info( "info_angel_start" )
  then
    return ogse_st_mgr.delayed_fun_start()
      :set_delay( 10 )
      :init( "dsh.black_doc_exo_start_sms" )
      :start()
  end
end

function black_doc_exo_start_sms()
  news_manager.send_tip(
    db.actor,
    "%c[255,160,160,160]"
    .. "ВОЛК:" .. "\\n"
    .. "%c[255,255,128,128]Стрелок, будешь рядом, загляни ко мне. Дело одно есть." .. "" .. "\n",
    nil, nil, 30000
  )
end


function blowout_modif_arts()
  local arts = get_art_levels()
  local step = ( 1 + level.get_game_difficulty() ) / 10
  local create_later = {}
  for i = 1, 65534 do
    local sobj = alife():object( i )
    if sobj and is_artefact( sobj:section_name() ) then
      local sect      = sobj:section_name()
      local is_af_dyn = string.find( sect, "_dyn[2-5]d" ) and true or false
      if
        is_af_dyn
        or ( arts[ sect ] and table.getn( arts[ sect ].next ) < 2 )
      then                      -- подходящий артефакт
        local modifit = false
        local lname   = object_level_name( sobj )
        if has_alife_info( "testsak_" .. lname ) then
          -- если на этой локации артефакты генерировались, то можно вырождать.
          -- Иначе пусть лежат в тайниках или где их там заспаунили и ждут.
          modifit = true
        end
        if modifit and sobj.parent_id ~= 0 and sobj.parent_id ~= 65535 then
          local p_sobj = alife():object( sobj.parent_id )
          if
            p_sobj and IsStalker( p_sobj )
            and ( not p_sobj:can_be_spawned() )
          then
            -- если неписю еще не разрешено выходить в онлайн, то и нечего
            -- модифицировать его артефакты. Вот так и достается нам с
            -- трупика Шныры булыжник.
            modifit = false
          end
        end
        if modifit then
          local cond, pk, data
          local obj = level.object_by_id( sobj.id )
          if obj then
            cond = obj:condition()
          else
            pk = get_netpk( sobj, 1 )
            if pk:isOk() then
              data = pk:get()
              cond = data.condition
            end
          end
          local make_buliz = "af_buliz"
          if is_af_dyn then
            make_buliz = string.gsub(
              sect, "_dyn(%d)d",
              function ( d )
                return "_dyn" .. ( tonumber( d ) - 1 ) .. "d"
              end
            )
          elseif cond then
            if cond >= 0.01 then
              make_buliz = false
              cond = cond - ( math.random() * step )
              if cond <= 0 then cond = 0 end
              if obj then
                dsh.set_condition( obj, cond )
              else
                data.condition = cond
                pk:set( data )
              end
            end
          end
          if make_buliz then
            local t = {}
            if sobj.parent_id == 65535 then
              t.args = {
                make_buliz, sobj.position,
                sobj.m_level_vertex_id, sobj.m_game_vertex_id
              }
            else
              t.args = {
                make_buliz, sobj.position,
                sobj.m_level_vertex_id, sobj.m_game_vertex_id,
                sobj.parent_id
              }
            end
            if make_buliz ~= "af_buliz" then
              t.cond = cond
            end
            table.insert( create_later, t )
            alife():release( sobj )
          end
        end
      end
    end
  end
  for _, t in ipairs( create_later ) do
    local sobj = alife():create( unpack( t.args ) )
    if t.cond then
      local pk = get_netpk( sobj, 1 )
      if pk:isOk() then
        local data = pk:get()
        data.condition = t.cond
        pk:set( data )
      end
    end
  end
end


function get_next_random( vname, ... )
  local args = { ... }
  local min, max
  if table.getn( args ) == 1 then
    min, max = 1, args[ 1 ]
  elseif table.getn( args ) > 1 then
    min, max = unpack( args )
  end
  if min and max and min == max then return min end
  local nums = ogse.load_var_safe( vname ) or {}
  while table.getn( nums ) < 100 do
    table.insert( nums, math.random() )
  end
  local cur_num = tonumber( table.remove( nums, 1 ) )
  table.insert( nums, math.random() )
  ogse.save_var( vname, nums, "array_template", { "float" } )
  if table.getn( args ) > 0 then
    cur_num = min + round( cur_num * ( max - min ) )
  end
  local tname = "dsh.change_next_random_delayed." .. vname
  if not ogse_st_mgr.timer_exists( tname ) then
    start_gtimerDHMS(
      tname, 0, math.random( 20, 48 ), 0, 0,
      "dsh.change_next_random_delayed", vname
    )
  end
  return cur_num
end


function change_next_random_delayed( vname )
  get_next_random( vname )
end


-- сделать врагами группу Черепа, что бы долговцы в Баре не краснели
-- после их убийства. Если они все в онлайне, то можно поменять им
-- группировку, для надежности.
function mil_dolg_enemy()
  local strn = alife():object( "mil_dolg" )
  if not strn then return end
  local offline, online = {}, {}
  for id, v in pairs( strn.npc_info ) do
    local sobj = alife():object( id )
    if sobj then
      table.insert( offline, sobj )
      local obj = level.object_by_id( sobj.id )
      if obj then
        table.insert( online,  obj  )
      end
    end
  end
  if table.getn( offline ) == table.getn( online ) then
    for _, obj in ipairs( online ) do
      obj:set_character_community( "killer", 0, 0 )
      obj:set_relation( game_object.enemy, db.actor )
    end
  else
    for _, sobj in ipairs( offline ) do
      relation_registry.set_goodwill( sobj.id, db.actor:id(), -9000 )
    end
  end
end


function say_blin()
  local snd = sound_object(
    "scripts\\nlc6\\matches_no_light_" .. math.random( 3 )
  )
  snd:play( db.actor, 0, sound_object.s2d )
end


function actor_can_move( status )
  ogse_actor_conditions_mgr.change_walk_accel(   )
  ogse_actor_conditions_mgr.change_jump_speed(   )
end
function actor_cant_move()
  ogse_actor_conditions_mgr.change_walk_accel( 0 )
  ogse_actor_conditions_mgr.change_jump_speed( 0 )
end


local ammo_sections_cache = {}
function get_ammo_sections( wpn )
  local sect = wpn:section()
  if not ammo_sections_cache[ sect ] then
    local t = {}
    ammo_sections_cache[ sect ] = t
    for _, k in ipairs({ "ammo_class", "grenade_class" }) do
      local s = get_string( sect, k )
      if s then
        t[ k ] = parse_names( s )
      end
    end
  end
  return ammo_sections_cache[ sect ]
end


function get_cur_wpn_ammo( wpn )
  local ammo_sect
  local has_gl = false
  if wpn:is_weapon_gl() then
    has_gl = (
      ogse_wpn_utils.get_grenade_launcher_status( wpn ) == 1
      or (
        ogse_wpn_utils.get_grenade_launcher_status( wpn ) == 2
        and ogse_wpn_utils.get_grenade_launcher_flag( wpn )
      )
    )
  end
  if wpn:is_weapon() then
    local wpn_info_s, wpn_info_t = dsh_rukzak.get_wpn_info( wpn )
    local ammo1_t, ammo1_n, ammo2_t, ammo2_n = unpack( wpn_info_t )
    local ammo = get_ammo_sections( wpn )
    if has_gl and ogse_wpn_utils.get_gl_mode( wpn ) then
      if ammo2_n > 0 then
        ammo_sect = ammo.grenade_class[ ammo2_t + 1 ]
      end
    else
      ammo_sect = ammo.ammo_class[ ammo1_t + 1 ]
    end
  end
  return ammo_sect
end


function find_capsule()
  local res, t = amk_utils.inventory_search_check({
    [ "af_capsule" ] = 1,
  })
  if res then
    return t[ 1 ]
  else
    local found
    amk_utils.inventory_iterate_section(
      "arc_art_box_1basic",
      function( item )
        local idx  = arc_1containers.get_inv_index( item:id() )
        local arts = arc_1containers.get_inv_container_arts( idx )
        for _, n in pairs( arts ) do
          if n > 0 then
            local sect = arc_arts.get_art_section( n )
            if sect == "af_capsule" then
              found = item
              return true
            end
          end
        end
      end
    )
    return found
  end
end

function have_capsule()
  return find_capsule() ~= nil
end

function transfer_any_capsule( info, minutes )
  local obj = find_capsule()
  if obj then
    if obj:section() == "arc_art_box_1basic" then
      news_manager.relocate_item( db.actor, "out", "af_capsule" )
      ogse.remove_item_from_inventory( obj )
      ogse.spawn_item_in_inv( "arc_art_box_1basic" )
    else
      news_manager.relocate_item( db.actor, "out", obj:section() )
      ogse.remove_item_from_inventory( obj )
    end
    local tname = "dsh." .. info
    start_gtimerDHMS(
      "dsh." .. info,
      0, 0, minutes, 0,
      "dsh.transfer_any_capsule_done",
      info
    )
  end
end

function transfer_any_capsule_done( info )
  db.actor:give_info_portion( info )
end

function transfer_any_capsule_barman()
  transfer_any_capsule( "barman_capsule_ready", 50 )
end

function transfer_any_capsule_sidor()
  transfer_any_capsule( "capsule_ready", 65 )
end

function transfer_any_capsule_sakharov()
  transfer_any_capsule( "sakharov_capsule_ready", 15 )
end


function mark_art_as_handmade( sobj, flag )
  if not sobj then return end
  local pk = get_netpk( sobj, 1 )
  if not pk:isOk() then return end
  local data = pk:get()
  local cd   = data.custom_data:getTable()
  if not cd.dsh then
    cd.dsh = {}
  end
  cd.dsh[ "handmade" ] = ( flag and "true" or "false" )
  data.custom_data:setTable( cd )
  pk:set( data )
end


function add_art_capsule()
  local arts = get_art_levels()
  local possible_arts = {}
  for sect, v in pairs( arts ) do
    if table.getn( v.prev ) > 0 and table.getn( v.next ) == 0 then
      table.insert( possible_arts, sect )
    end
  end
  local rnd  = get_next_random(
    "dsh.add_art_capsule.rnd", table.getn( possible_arts )
  )
  local sect = possible_arts[ rnd ]
  local prop = amk_utils.get_item_props( sect )
  local sobj = ogse.spawn_item_in_inv( prop.af_bio_sect or sect )
  news_manager.relocate_item( db.actor, "in", sect )
end


function has_trade_dialog( k )
  local tname = "dsh.has_trade_dialog." .. k
  local res   = ogse_st_mgr.timer_exists( tname )
  if res then
    res = ogse.load_var( tname .. ".cnt", 10 ) > 0
  end
  return res
end

function trade_say_come_later( name, say_str )
  local diff_sec
  local hasnt_trade = "dsh.hasnt_trade_dialog." .. name
  if ogse_st_mgr.timer_exists( hasnt_trade ) then
    local t  = ogse_st_mgr.get_timer( hasnt_trade ):get_end_time()
    diff_sec = t:diffSec( game.get_game_time() )
  else
    local has_trade = "dsh.has_trade_dialog." .. name
    local t  = ogse_st_mgr.get_timer( has_trade ):get_end_time()
    diff_sec = t:diffSec( game.get_game_time() ) + 24 * 3600
  end
  local days = diff_sec / ( 24 * 3600 )
  local when
  if     days < 2 then
    when = "завтра"
  elseif days < 3 then
    when = "через пару дней"
  elseif days < 4 then
    when = "дня через три"
  elseif days < 5 then
    when = "дня через четыре"
  elseif days < 6 then
    when = "дней через пять"
  elseif days < 7 then
    when = "дней через шесть"
  else
    when = "через недельку"
  end
  when = string.format(
    ( say_str or "Заходи %s, может появится что-нибудь." ), when
  )
  db.actor:give_talk_message(
    when, "ui\\ui_iconstotal", Frect():set( 0, 0, 10, 10 ),
    "simple_answer_item"
  )
end

function start_trade_dialog_timer( k, hours, cnt )
  if not hours then hours = math.random( 24, 72 ) end
  local tname = "dsh.has_trade_dialog." .. k
  start_gtimerDHMS(
    tname, 0, hours, 0, 0,
    "dsh.stop_trade_dialog_timer", k
  )
  if not cnt then cnt = math.random( 10 ) end
  ogse.save_var( tname .. ".cnt", cnt, "u8" )
end

function stop_trade_dialog_timer( k )
  start_gtimerDHMS(
    "dsh.hasnt_trade_dialog." .. k,
    0, math.random( 24, 72 ), 0, 0,
    "dsh.start_trade_dialog_timer", k
  )
end

function dec_trade_dialog_cnt( k )
  local has_trade = "dsh.has_trade_dialog." .. k
  local n         = has_trade .. ".cnt"
  local cnt       = ogse.load_var( n, 10 )
  if cnt > 0 then
    cnt = cnt - 1
  end
  ogse.save_var( n, cnt, "u8" )
  if cnt == 0 and ogse_st_mgr.timer_exists( has_trade ) then
    ogse_st_mgr.get_timer( has_trade ):stop()
    stop_trade_dialog_timer( k )
  end
end

function has_trade_dialog_sidor()
  return has_trade_dialog( "sidor" )
end
function on_trade_dialog_sidor()
  return dec_trade_dialog_cnt( "sidor" )
end
function hasnt_trade_dialog_sidor()
  return not has_trade_dialog( "sidor" )
end
function trade_sidor_say_later()
  trade_say_come_later( "sidor" )
end

function has_trade_dialog_barman()
  return has_trade_dialog( "barman" )
end
function on_trade_dialog_barman()
  return dec_trade_dialog_cnt( "barman" )
end
function hasnt_trade_dialog_barman()
  return not has_trade_dialog( "barman" )
end
function trade_barman_say_later()
  trade_say_come_later( "barman" )
end

function has_trade_dialog_petrenko()
  return has_trade_dialog( "petrenko" )
end
function on_trade_dialog_petrenko()
  return dec_trade_dialog_cnt( "petrenko" )
end
function hasnt_trade_dialog_petrenko()
  return not has_trade_dialog( "petrenko" )
end
function trade_petrenko_say_later()
  trade_say_come_later( "petrenko" )
end

function has_trade_dialog_skraga()
  return has_trade_dialog( "skraga" )
end
function on_trade_dialog_skraga()
  return dec_trade_dialog_cnt( "skraga" )
end
function hasnt_trade_dialog_skraga()
  return not has_trade_dialog( "skraga" )
end
function trade_skraga_say_later()
  trade_say_come_later( "skraga" )
end

function has_trade_dialog_sakharov()
  return has_trade_dialog( "sakharov" )
end
function on_trade_dialog_sakharov()
  return dec_trade_dialog_cnt( "sakharov" )
end
function hasnt_trade_dialog_sakharov()
  return not has_trade_dialog( "sakharov" )
end
function trade_sakharov_say_later()
  trade_say_come_later( "sakharov", "Заходите %s, может появится что-нибудь." )
end

function has_trade_dialog_sak()
  return has_trade_dialog( "sak" )
end
function on_trade_dialog_sak()
  return dec_trade_dialog_cnt( "sak" )
end
function hasnt_trade_dialog_sak()
  return not has_trade_dialog( "sak" )
end
function trade_sak_say_later()
  trade_say_come_later( "sak" )
end

function has_trade_dialog_kuznezov()
  return has_trade_dialog( "kuznezov" )
end
function on_trade_dialog_kuznezov()
  return dec_trade_dialog_cnt( "kuznezov" )
end
function hasnt_trade_dialog_kuznezov()
  return not has_trade_dialog( "kuznezov" )
end
function trade_kuznezov_say_later()
  trade_say_come_later( "kuznezov" )
end

function has_trade_dialog_jlob()
  return has_trade_dialog( "jlob" )
end
function on_trade_dialog_jlob()
  return dec_trade_dialog_cnt( "jlob" )
end
function hasnt_trade_dialog_jlob()
  return not has_trade_dialog( "jlob" )
end
function trade_jlob_say_later()
  trade_say_come_later( "jlob" )
end

function has_trade_dialog_sherstyk()
  return has_trade_dialog( "sherstyk" )
end
function on_trade_dialog_sherstyk()
  return dec_trade_dialog_cnt( "sherstyk" )
end
function hasnt_trade_dialog_sherstyk()
  return not has_trade_dialog( "sherstyk" )
end
function trade_sherstyk_say_later()
  trade_say_come_later( "sherstyk" )
end

function has_trade_dialog_voron()
  return has_trade_dialog( "voron" )
end
function on_trade_dialog_voron()
  return dec_trade_dialog_cnt( "voron" )
end
function hasnt_trade_dialog_voron()
  return not has_trade_dialog( "voron" )
end
function trade_voron_say_later()
  trade_say_come_later( "voron" )
end

function has_trade_dialog_maks()
  return has_trade_dialog( "maks" )
end
function on_trade_dialog_maks()
  return dec_trade_dialog_cnt( "maks" )
end
function hasnt_trade_dialog_maks()
  return not has_trade_dialog( "maks" )
end
function trade_maks_say_later()
  trade_say_come_later( "maks" )
end


function actor_get_art_bio( sect, n )
  local arts = {}
  amk_utils.inventory_iterate_section(
    sect,
    function( obj )
      if is_zone_bio_art( obj ) and db.actor:is_in_ruck( obj ) then
        table.insert( arts, obj )
        if table.getn( arts ) == n then return true end
      end
    end
  )
  if table.getn( arts ) == n then return arts end
end

function actor_has_art_bio( sect, n )
  if actor_get_art_bio( sect, n ) then return true else return false end
end

function actor_give_art_bio( sect, n )
  local arts = actor_get_art_bio( sect, n )
  if arts then
    for i = 1, n do
      local obj = table.remove( arts, 1 )
      ogse.remove_item_from_inventory( obj )
      news_manager.relocate_item( db.actor, "out", obj:section() )
    end
  end
end

function actor_has_art_bio_af_soul()
  return actor_has_art_bio( "af_soul", 1 )
end

function actor_give_art_bio_af_soul()
  return actor_give_art_bio( "af_soul", 1 )
end

function has_art_bio_cristall()
  return actor_has_art_bio( "af_cristall", 1 )
end

function give_art_bio_cristall()
  return actor_give_art_bio( "af_cristall", 1 )
end

function has_art_bio_5cristall()
  return actor_has_art_bio( "af_cristall", 5 )
end

function give_art_bio_5cristall()
  return actor_give_art_bio( "af_cristall", 5 )
end

function has_art_bio_moonlight()
  return actor_has_art_bio( "af_electra_moonlight", 1 )
end

function give_art_bio_moonlight()
  return actor_give_art_bio( "af_electra_moonlight", 1 )
end

function has_art_bio_mica()
  return actor_has_art_bio( "af_ameba_mica", 1 )
end

function give_art_bio_mica()
  return actor_give_art_bio( "af_ameba_mica", 1 )
end

function has_art_bio_gravi()
  return actor_has_art_bio( "af_gravi", 1 )
end

function give_art_bio_gravi()
  return actor_give_art_bio( "af_gravi", 1 )
end

function has_art_bio_medusa()
  return actor_has_art_bio( "af_medusa", 1 )
end

function give_art_bio_medusa()
  return actor_give_art_bio( "af_medusa", 1 )
end


function get_handmade_cost( sect )
  local cost = get_u32( sect, "dsh.handmade.cost" )
  if not cost then
    cost = get_u32( sect, "cost" ) / 10
  end
  return cost
end


function is_handmade_artefact( sobj )
  local sect     = sobj:section_name()
  local prop     = amk_utils.get_item_props( sect )
  local handmade = get_bool(
    sect, "bind_det_arts.handmade", ( not prop.is_af_bio )
  )
  local ini = sobj:spawn_ini()
  if handmade and ini and ini:section_exist( "dsh" ) then
    handmade = ( get_bool( "dsh", "handmade", nil, ini ) ~= false )
  end
  return handmade
end


function find_random_lvid_in_radius( lname, lvid, radius )
  local dir = vector():set(
    math.random( -1000, 1000 ) / 1000, 0, math.random( -1000, 1000 ) / 1000
  )
  dir:normalize()
  local found_lv
  for i = 1, 359 do
    local new_lvid = level.vertex_in_direction( lvid, dir, radius )
    if new_lvid ~= lvid then
      found_lv = new_lvid
      break
    end
    dir = vector_rotate_y( dir, 1 )
  end
  if found_lv then
    local pos  = level.vertex_position( found_lv )
    local gvid = amk_anoms.find_gvid( lname, pos )
    if gvid then
      return pos, found_lv, gvid
    end
  end
end


function get_this_level_difficulty()
  local val = get_float(
    level.name(), "dsh.this_level_difficulty", nil, game_ini()
  )
  ASSERT( val, "this_level_difficulty not defined for %s", level.name() )
  return val
end


local knives = {}
function is_knife( sect )
  if knives[ sect ] == nil then
    knives[ sect ] = get_bool( sect, "dsh.is_knife", false )
  end
  return knives[ sect ]
end


function set_inactivate_input_time( delta )
  local tname = "dsh.disable_input_time"
  if ogse_st_mgr.timer_exists( tname ) then
    ogse_st_mgr.get_timer( tname ):stop()
  end
  level.disable_input()
  ogse_st_mgr.delayed_fun_start( tname )
    :set_gdelay( delta )
    :init( "level.enable_input" )
    :start( true )
end

function is_input_time_inactivated()
  return ogse_st_mgr.timer_exists( "dsh.disable_input_time" )
end


function spawn_physic_sleep_bag( pos, lvid, gvid )
  local sobj = alife():create( "physic_object", pos, lvid, gvid )
  local pk = get_netpk( sobj, 1 )
  ASSERT( pk:isOk(), "can't read netpacket of %s", sobj:name() )
  local data = pk:get()
  data.visual_name = [[physics\decor\bag_01]]
  data.custom_data:setString(
    "[logic]\ncfg = scripts\\esc_sleep.ltx\n[collide]\nignore_static\n"
  )
  data.physic_type = 3
  data.mass        = 1
  data.fixed_bones = "joint1, joint5"
  pk:set( data )
  return sobj
end


function find_ekza_akkumul_discharged()
  local items = {}
  amk_utils.inventory_iterate_section(
    "ekza_akkumul",
    function( item )
      if db.actor:is_in_ruck( item ) and item:condition() < 1 then
        table.insert( items, item )
      end
    end
  )
  table.sort(
    items, function( a, b ) return a:condition() < b:condition() end
  )
  return items
end


function actor_has_ekza_akkumul_dis()
  local items = find_ekza_akkumul_discharged()
  return table.getn( items ) > 0
end


function give_ekza_akkumul_dis()
  local items = find_ekza_akkumul_discharged()
  ASSERT( table.getn( items ) > 0, "ekza_akkumul not found" )
  ogse.remove_item_from_inventory( items[ 1 ] )
  news_manager.relocate_item( db.actor, "out", items[ 1 ]:section() )
end


function add_ekza_akkumul()
  local sobj = ogse.spawn_item_in_inv( "ekza_akkumul" )
  news_manager.relocate_item( db.actor, "in", sobj:section_name() )
end


function shuffle( array )
  local n, random, j, k = table.getn( array ), math.random
  for i = 1, n do
    j, k = random( n ), random( n )
    array[ j ], array[ k ] = array[ k ], array[ j ]
  end
  return array
end


local cached_condlist_hit  = 0
local cached_condlist_miss = 0

class "cached_condlist"
function cached_condlist:__init( parsed, ttl )
  self.parsed = parsed
  self.ttl    = ttl
end

function cached_condlist:pick_section_from_condlist( actor, npc )
  if ( not self.cached_time ) or self.cached_time < time_global() then
    self.cached_res  = xr_logic.pick_section_from_condlist(
      actor, npc, self.parsed
    )
    self.cached_time = time_global() + self.ttl
    cached_condlist_miss = cached_condlist_miss + 1
  else
    cached_condlist_hit  = cached_condlist_hit  + 1
  end
  return self.cached_res
end


function on_destroy()
  log2(
    "[%s]: cached_condlist stats ( hit/miss ): %s / %s",
    script_name(), cached_condlist_hit, cached_condlist_miss
  )
end


function make_pantera_alive()
  local sobj = alife():create( 2228 ) -- hos_new_panterka
  ASSERT( sobj, "can't create hos_new_panterka" )
  local pk = get_netpk( sobj, 1 )
  ASSERT( pk:isOk(), "can't read netpacket of %s", sobj:name() )
  local data = pk:get()
  data.custom_data:setString(
    "[smart_terrains]\n"
    .. "none = true\n" ..
    "[logic]\n"
    .. "cfg = dsh\\logic\\pantera_is_alive.ltx\n"
  )
  pk:set( data )
end


function sms_otez_pantera_alive_run()
  local sobj = alife():object( "hos_new_panterka" )
  if sobj then
    ogse_st_mgr.start_timer(
      "dsh.sms_otez_pantera_alive",
      30,
      "dsh.sms_otez_pantera_alive"
    )
  end
end

function sms_otez_pantera_alive()
  news_manager.send_tip(
    db.actor,
    "%c[255,160,160,160]" .. "ОТЕЦ ПАНТЕРЫ:\\n"
      .. "%c[255,255,128,128]Стрелок, она жива! Пантера жива! Она в Госпитале и я иду к ней. Мы пробудем там, пока Пантера не придет в себя.",
    nil, nil, 25000
  )
end


function get_current_outfit_protection( hit )
  if not db.actor:get_current_outfit() then return 0 end
  return db.actor:get_current_outfit_protection( hit )
end


function akim_hog_sms()
  news_manager.send_tip(
    db.actor,
    "%c[255,160,160,160]".."АКИМ:\\n"
      .. "%c[255,255,128,128]Стрелок, тут за воротами, на Свалке, какой-то сталкер чудной. Хогом его зовут. Небылицы разные рассказывает, но думаю, тебя это может заинтересовать.\n",
    nil, nil, 25000
  )
end


function handmade_arts_cnt( inc )
  local cnt = ogse.load_var( "dsh.handmade_arts_cnt", 0 )
  if inc then
    cnt = cnt + inc
    ogse.save_var( "dsh.handmade_arts_cnt", cnt, "u32" )
  end
  return ( cnt > 2 and cnt or 2 )
end


function make_free_prizrak()
  local npcs = {
    [ "gen_prizrak_izomorf" ] = {
      [ "story_id" ] = story_ids.gen_prizrak_izomorf, -- 19017
    },
    [ "pripyt_kluk"         ] = {
      [ "story_id" ] = story_ids.pripyt_kluk, -- 19025
    },
    [ "village_piligrim"    ] = {
      [ "spawn_id" ] = 13048,
    },
  }
  for name, v in pairs( npcs ) do
    local sobj = alife():object( name )
    if sobj then
      alife():release( sobj )
    end
    if not v.spawn_id then
      v.spawn_id = alife():spawn_id( v.story_id )
    end
    sobj = alife():create( v.spawn_id )
    local pk = get_netpk( sobj, 1 )
    ASSERT( pk:isOk(), "can't read netpacket of %s", sobj:name() )
    local data = pk:get()
    data.custom_data:setTable( {} )
    pk:set( data )
  end
end


function has_wpn_fot()
  return amk_utils.inventory_search( "wpn_fot", 1 )
end


function make_free_yantar_chernomor()
  local sobj = alife():story_object( story_ids.yantar_chernomor )
  if sobj then
    alife():release( sobj )
  end
  local spawn_id = alife():spawn_id( story_ids.yantar_chernomor )
  sobj = alife():create( spawn_id )
  local pk = get_netpk( sobj, 1 )
  ASSERT( pk:isOk(), "can't read netpacket of %s", sobj:name() )
  local data = pk:get()
  data.custom_data:setTable( {} )
  data.story_id = -1
  pk:set( data )
end


function spawn_2soldier_outfits()
  local sobj = alife():object( "esc_surprise_box_015" )
  if not sobj then
    alife():create( 3556 )
  end
end

function del_2soldier_outfits()
  local sobj = alife():object( "esc_surprise_box_015" )
  if sobj then
    alife():release( sobj )
  end
end


function get_actor_name()
  return ( has_alife_info( "esc_find_doctor_done" ) and "Стрелок" or "Меченый" )
end


function spawn_bland_flash( npc, actor )
  if npc:id() == db.actor:id() then npc = actor end
  amk.spawn_item_in_inv( "bland_flash", npc )
end


function alife_find_and_release( items )
  local need = {}
  for _, k in ipairs( items ) do
    need[ k ] = true
  end
  local cnt = table.getn( items )
  for id = 1, 65534 do
    local sobj = alife():object( id )
    if sobj then
      if need[ sobj:section_name() ] then
        need[ sobj:section_name() ] = nil
        cnt = cnt - 1
        alife():release( sobj )
        if cnt == 0 then break end
      end
    end
  end
end


function clear_useful_for_ai( sobj )
  local pk = get_netpk( sobj, 1 )
  ASSERT( ( pk and pk:isOk() ), "can't read netpacket of %s", sobj:name() )
  local data = pk:get()
  data.object_flags = bit_and(
    data.object_flags, bit_not( object_flags.UsefulForAI )
  )
  pk:set( data )
end


function udalyem_molniu()
  ogse_st_mgr.start_timer(
    "arhara_dialog.sp_imit_tele_molniy",
    3,
    "arhara_dialog.sp_imit_tele_molniy"
  )
  ogse_st_mgr.start_timer(
    "arhara_dialog.dell_molniy",
    5.5,
    "arhara_dialog.dell_molniy"
  )
  ogse_st_mgr.start_timer(
    "dsh.portal_na_mg",
    20.5,
    "dsh.portal_na_mg"
  )
end

function portal_na_mg()
  db.actor:give_info_portion( "portal_na_mg" )
end
