-- -*- mode: lua; coding: windows-1251-dos -*-

-- время саморазряда аккумулятора в днях
local self_discharge_days = 7

-- Насколько данные артефакты могут зарядить аккумулятор
local af_recharge_coef = {
  [ "af_dummy_battery" ] = 1.0,
  [ "art_acumm"        ] = 0.65,
}


function attach( sm )
  sm:subscribe({ signal = "on_first_update", fun = this.on_first_update })
  sm:subscribe({ signal = "on_update", fun = this.on_update })
  sm:subscribe({ signal = "on_use",    fun = this.on_use })
end


local pt, self_discharge_cond

function on_first_update()
  pt = { game.get_game_time():get() }
  self_discharge_cond = 1 / ( self_discharge_days * 24 * 3600 )
  if has_power() == 0 then
    stop_active_pnv()
  end
end


local pnv_timer
function on_update()
  ogse_signals.get_mgr():reschedule( math.random( 10000, 12000 ) )
  if not db.actor:alive() then return end
  if dsh_weight_control.get_power_mode() then return end
  local previous_check_time = game.CTime()
  previous_check_time:set( unpack( pt ) )
  local current_time = game.get_game_time()
  local dt = current_time:diffSec( previous_check_time )
  pt = { current_time:get() }
  local acs = inventory.on_belt_obj( "acumm" )
  if acs then
    local pnv_discharge = calc_pnv_discharge( dt );
    local left_cond     = self_discharge_cond * dt + pnv_discharge
    for _, k in ipairs( acs ) do
      if k:condition() > 0 then
        if k:condition() > left_cond then
          dsh.set_condition( k, k:condition() - left_cond )
          if k:condition() < 0.1 then
            if pnv_discharge > 0 and not pnv_timer then
              pnv_timer = dsh.timeout(
                ( math.random( 30, 300 ) * 1000 ),
                function()
                  pnv_timer = nil
                  if has_power() < 0.1 then
                    stop_active_pnv()
                  end
                end
              )
            end
          end
        else
          dsh.set_condition( k, 0 )
          stop_active_pnv()
        end
        return
      end
    end
  end
  stop_active_pnv()
end


function stop_active_pnv()
  if pnv_timer then
    pnv_timer:stop()
    pnv_timer = nil
  end
  local active_pnv = ogse_night_vision.get_active_nv_device()
  if active_pnv then
    ogse_night_vision.nv_fx( false )
  end
end


function calc_pnv_discharge( dt )
  local active_pnv = ogse_night_vision.get_active_nv_device()
  if active_pnv then
    local hours = sys_ini:r_u32( active_pnv:section(), "pnv_discharge_hours" )
    return 1 / ( hours * 3600 ) * dt
  end
  return 0
end


function on_use( obj, sobj )
  if not sobj then return end
  local sect = obj:section()
  if sect == "acumm" then
    if dsh.is_enemy_around() then
      ogse.autohiding_msg( "Не время заряжать аккумулятор, враг рядом", 1500 )
    elseif obj:condition() > 0.99 then
      ogse.autohiding_msg( "Аккумулятор не нуждается в подзарядке", 1500 )
    else
      local spwn = ui_recharge( get_hud(), obj )
      level.start_stop_menu( spwn, true )
    end
    return true
  end
end


function get_usefull_power( obj )
  local cond = obj:condition()
  local coef = af_recharge_coef[ obj:section() ]
  if coef then return cond * coef end
  return cond * 0.9
end


function has_power()
  if dsh_weight_control.get_power_mode() then return 1 end
  local acs = inventory.on_belt_obj( "acumm" )
  if acs then
    for _, k in ipairs( acs ) do
      if k:condition() > 0 then
        return k:condition()
      end
    end
  end
  return 0
end


class "ui_recharge" ( dsh_ui_simple_craft.ui_simple_craft )
function ui_recharge:__init( owner, item )
  super( owner, "ui_dsh_recharge_acumm.xml", item )
end


function ui_recharge:can_include_into_list( item )
  if af_recharge_coef[ item:section() ] and item:condition() > 0 then
    return true
  end
  return false
end


function ui_recharge:calc_shans_bar_height( item, destr_item )
  local new_cond = item:condition() + get_usefull_power( destr_item )
  if new_cond > 1 then new_cond = 1 end
  return new_cond * 100
end


function ui_recharge:do_craft( item )
  local cond       = self.item:condition()
  local have_power = get_usefull_power( item )
  local need       = 1 - cond
  if have_power > need then
    dsh.set_condition( self.item, 1.0 )
    dsh.set_condition( item, have_power - need )
  else
    dsh.set_condition( self.item, cond + have_power )
    ogse.remove_item_from_inventory( item )
  end
  db.actor:invalidate_inventory()
  update_inventory_window()
  self:message_box_success()
end


function ui_recharge:message_box_success()
  self.msgbox_id  = 1
  self.need_close = true
  self.message_box:Init( "message_box_repair_success" )
  self.message_box:SetText(
    string.format(
      "Аккумулятор заряжен на %.0f%%",
      self.item:condition() * 100
    )
  )
  self:GetHolder():start_stop_menu( self.message_box, true )
end
