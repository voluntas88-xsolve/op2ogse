-- -*- mode: lua; coding: windows-1251-dos -*-

function v3f( x, y, z )
  return vector():set( x, y, z )
end


function check_coordinates( pos )
  return (
    amk_anoms.check_anti_spawn_zones( pos )
    and amk_anoms.check_hideouts( pos, level.name() )
  )
end


function fear_sounds()
  local actor   = db.actor
  local act_pos = actor:position()
  if not check_coordinates( act_pos ) then return end
  local lvid   = actor:level_vertex_id()
  local gvid   = actor:game_vertex_id()
  local lname  = level.name()
  local radius = 3
  local dir    = vector_rotate_y(
    actor:direction(), ( 240 - 20 * math.random( 6 ) )
  )
  local lv     = level.vertex_in_direction(
    actor:level_vertex_id(), dir, radius
  )
  local pos
  if not lv then
    lv  = actor:level_vertex_id()
    pos = actor:position():add( v3f( dir.x * radius, 0, dir.z * radius ) )
  else
    pos = level.vertex_position( lv )
  end
  local rands = math.random( 4 )
  if lname == "aver" then
    if rands == 1 then
      local obj = misc.spawn_obj(
        "fall_object", v3f( act_pos.x, act_pos.y + 5, act_pos.z )
      )
      local rand_vis = fall_objects[
        math.random( table.getn( fall_objects ) )
      ]
      if obj then
        local pk   = get_netpk( obj, 1 )
        local data = pk:get()
        data.visual_name = rand_vis
        data.mass = 20
        pk:set( data )
        schedule.add( "hit_obj", "sak.hit_item(" .. obj.id .. ")", 500 )
      end
    elseif rands == 2 then
      lv = level.vertex_in_direction( actor:level_vertex_id(), dir, 5 )
      if not lv then
        lv  = actor:level_vertex_id()
        pos = actor:position():add( v3f( dir.x, 0, dir.z ) )
      else
        pos = level.vertex_position( lv )
      end
      pos = v3f( pos.x, 5, pos.z )
      local rand_monstr =table_monsters[
        math.random( table.getn( table_monsters ) )
      ]
      for i = 1, math.random( rand_monstr[ 2 ] / 2, rand_monstr[ 2 ] + 2 ) do
        local obj = dsh.create_free_mob( rand_monstr[ 1 ], pos, lv, gvid )
        if obj then
          local id = obj.id
          timers.start_timer(
            "off_obj_" .. id .. "a", 160 + i * 10,
            "sak.off_monster(" .. id .. ")"
          )
        end
      end
    elseif rands == 4 then
      add_rad()
    elseif rands == 3 then
      if math.random() > 0.4 then
        local robjd = amk.spawn_item( "fear_sound_item", pos, gvid, lv )
        if robjd then
          local pk   = get_netpk( robjd, 1 )
          local data = pk:get()
          data.custom_data:setString(
            "[logic]\ncfg = scripts\\fear_sound_" .. sounds_types[ lname ] .. ".ltx"
          )
          pk:set( data )
        end
      else
        local dir = device().cam_dir
        local x   = -dir.x
        local y   =  dir.y
        local z   = -dir.z
        dir = vector()
        dir:set( x, y, z )
        local h = dir:getH()
        local p = dir:getP()
        db.actor:set_camera_direction( vector():set( -h, -p, 0 ) )
      end
    end
  else                          -- if lname == "aver"
    if rands == 2 then
      local robjd = amk.spawn_item( "fear_sound_item", pos, gvid, lv )
      if robjd then
        local pk   = get_netpk( robjd, 1 )
        local data = pk:get()
        data.custom_data:setString(
          "[logic]\ncfg = scripts\\fear_sound_" .. sounds_types[ lname ] .. ".ltx"
        )
        data.mass = 0.1
        pk:set( data )
      end
    elseif not isIndoor( lname ) then
      if rands == 3 then
        pos = actor:position():add( v3f( dir.x * 10, 2, dir.z * 10 ) )
        phantom_manager.spawn_phantom( pos )
      elseif rands == 4 then
        add_rad()
      elseif rands == 1 then
        local visual_eff = {
          "elektra", "tramplin", "voronka", "garka", "karusel", "holodec",
          "g_puh", "pustishka",
        }
        local rand_vis = visual_eff[ math.random( table.getn( visual_eff ) ) ]
        local particle = particles_object(
          vergas_art.visual_effect[ rand_vis ][ 1 ]
        )
        local sound    = sound_object(
          vergas_art.visual_effect[ rand_vis ][ 2 ]
        )
        particle:play_at_pos( pos )
        sound:play_at_pos( actor, pos, 0 )
      end
    end
  end
end
