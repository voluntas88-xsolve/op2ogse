-- -*- mode: lua; coding: windows-1251-dos -*-
--/ ogse_night_vision.script /--
--/ Nightvision module /--
--/ OGS Evolution Team 2010 /--
--/ version 2.5 (27/04/2011)/--

--/ Модуль приборов ночного видения /--

function attach(sm)
  sm:subscribe({ signal = "on_destroy",      fun = this.on_destroy      })
  sm:subscribe({ signal = "on_first_update", fun = this.on_first_update })
  sm:subscribe({ signal = "on_hit",          fun = this.on_hit          })
  sm:subscribe({ signal = "on_key_down",     fun = this.call_pnv        })
  sm:subscribe({ signal = "on_load",         fun = this.on_game_load    })
  sm:subscribe({ signal = "on_mm_return_game", fun = this.on_mm_return_game })
  sm:subscribe({ signal = "on_sniper_mode",  fun = this.on_sniper_mode  })
  sm:subscribe({ signal = "on_spawn",        fun = this.on_spawn        })
end


-- флаг защиты от ошибочного включения (общий)
local night_vision_fx_store = false
-- флаг защиты от ошибочного включения (в окнах интерфейса)
local night_vision_fx_not_inventory = true
-- флаг защиты от ошибочного включения (в режиме прицеливания)
local night_vision_fx_not_sniper = true
-- флаг защиты от ошибочного включения (при работе с багажником транспорта)
local night_vision_fx_not_trunk = true
-- флаг защиты от ошибочного включения (в БТР)
local night_vision_fx_not_btr = true
-- флаг работающего ПНВ
local night_vision_fx_on = false
-- флаг автовключения ночного режима в оптическом прицеле (true)
local nv_scope_fx_autoenable = false
-- флаг работающего ночного режима в оптическом прицеле
local night_vision_scope_fx_on = false
-- флаг работающего ночного режима в бинокле
local night_vision_binocular_fx_on = false
-- флаг работающего ПНВ БТР
local night_vision_btr_fx_on = false

-- флаг наложения эффекта визуального шума
local night_vision_noise_fx_on = false
-- интенсивность налагаемого эффекта визуального шума (0-255)
local night_vision_noise_fx_intensity = 200

-- звук включения ПНВ
local snd_nv_start = xr_sound.get_safe_sound_object( "weapons\\nv_start" )
-- звук работающего ПНВ
local snd_nv_work -- = xr_sound.get_safe_sound_object( "weapons\\nv_loop_old" )
-- звук выключения ПНВ
local snd_nv_stop = xr_sound.get_safe_sound_object( "weapons\\nv_off" )
-- уровень громкости звуков
local snd_nv_fx_volume       = 0.5 -- общий уровень громкости звуков
local snd_nv_start_subvolume = 1   -- громкость звука включения ПНВ
local snd_nv_work_subvolume  = 0.3 -- громкость звука работающего ПНВ
local snd_nv_stop_subvolume  = 1   -- громкость звука выключения ПНВ

-- секция постпроцесса ПНВ БТР
local btr_nightvision_section = "effector_nightvision_elite"
-- уровень интенсивности постэффектов
-- уровень интенсивности постэффекта ПНВ
local nv_ppe_factor = 1.0 --0.8
-- уровень интенсивности постэффекта ночного режима прицела
local nv_scope_ppe_factor = 1.0 --0.7
-- уровень интенсивности постэффекта ночного режима бинокля
local nv_binocular_ppe_factor = 0.8
-- уровень интенсивности постэффекта ПНВ БТР
local nv_btr_ppe_factor = 1.0


function on_spawn()
  rebind_use_pnv()
end


local dik_use_pnv
function rebind_use_pnv()
  dik_use_pnv = {}
  local data = dsh_cfg.get_data()
  for _, kn in ipairs( parse_names( data.night_vision ) ) do
    local dik = ogse_rebind_key.keyname_to_dik( kn )
    ASSERT( dik, "keyname to dik not found: %s", kn )
    dik_use_pnv[ dik ] = true
  end
  cmd( "unbind night_vision" )
  cmd( "unbind_sec night_vision" )
end


function on_mm_return_game()
  rebind_use_pnv()
end


-- Вызов вкл/выкл ПНВ из коллбэка нажатия клавиши
function call_pnv( key, bind )
  local wnd = level.main_input_receiver()
  -- проверка на активное окно GPS-метки
  if wnd then return end
  if dik_use_pnv[ key ] then
    if db.actor:alive() then
      quicklaunch_nv_call()
      quicklaunch_nv_scope_call()
      quicklaunch_nv_binocular_call()
      quicklaunch_nv_btr_call()
    end
  end
end


-- Включение/выключение ПНВ из меню быстрого доступа
function quicklaunch_nv_call()
  if not night_vision_fx_on then
    nv_fx( true  )
  else
    nv_fx( false )
  end
end


-- Попытаемся восстановить работу ПНВ после загрузки сейва
function try_to_restart_nv_fx()
  local nv_fx_restore = ogse.load_var_safe( "pnv", false )
  if nv_fx_restore then
    if db.actor:alive() and not night_vision_fx_on then
      nv_fx( true )
    end
  end
end


-- Режим прицеливания через оптику
local switch_1 = false
local switch_2 = true

function on_sniper_mode( mode )
  if mode == nil then return end
  if mode == true then
    night_vision_fx_not_sniper = false
    switch_2 = true
    if nv_scope_fx_autoenable and not switch_1 then
      -- врубаем ночной прицел, если задано автовключение
      nv_scope_fx( true )
      switch_1 = true
    end
  elseif mode == false then
    if switch_2 then
      nv_scope_fx( false )      -- вырубаем ночной прицел
      switch_1 = false
      nv_binocular_fx( false )  -- вырубаем ночной бинокль
      night_vision_fx_not_sniper = true
      switch_2 = false
    end
  end
end


-- Для проверки работы ПНВ из других скриптов
function is_nv_working()
  if
    night_vision_fx_on
    or night_vision_scope_fx_on
    or night_vision_binocular_fx_on
    or night_vision_btr_fx_on
  then
    return true
  else
    return false
  end
end


-- Античит выкладывания работающего ПНВ в окнах, которые не удаётся
-- отловить штатно
function chek_drop_pnv(obj)
  if not obj then return end
  local s_obj = alife():object( obj:id() )
  if not s_obj then return end
  local obj_sec        = s_obj:section_name()
  local outfit_slot    = db.actor:item_in_slot( 6 )
  local outfit_slot_nv = outfit_slot
    and sys_ini:line_exist( outfit_slot:section(), "nightvision_sect" )
  local pnv_slot       =  db.actor:item_in_slot( 11 )
  local pnv_slot_nv    = pnv_slot
    and sys_ini:line_exist( pnv_slot:section(), "nightvision_sect" )
  if not outfit_slot_nv and not pnv_slot_nv then
    if night_vision_fx_on then
      turn_off_nv_fx( obj_sec )
      ogse.delete_var( "pnv" )
      active_nv_device = nil
    end
  end
end


-- Проверка "двойного" надевания ПНВ при смене костюма
function chek_outfit_double_pnv( obj )
  if not obj then return end
  local nv_slot        = db.actor:item_in_slot( 11 )
  local is_nv_obj      = sys_ini:line_exist( obj:section(), "nightvision_sect" )
  local outfit_slot    = db.actor:item_in_slot(6)
  local outfit_slot_nv = outfit_slot
    and sys_ini:line_exist( outfit_slot:section(), "nightvision_sect" )
  local is_outfit_nv   = obj:is_outfit() and is_nv_obj
  if is_outfit_nv then
    if nv_slot then
      ogse.spawn_item_in_inv( nv_slot:section() )
      ogse.remove_item( nv_slot )
    end
    if night_vision_fx_on then
      turn_off_nv_fx( nv_slot:section() )
      ogse.delete_var( "pnv" )
      active_nv_device = nil
    end
  elseif is_nv_obj then
    if outfit_slot_nv then
      ogse.spawn_item_in_inv( obj:section() )
      ogse.remove_item( obj )
    end
  end
end

-- "Горячий" рестарт ПНВ
function reset_pnv()
  standby_nv_fx( true  )
  standby_nv_fx( false )
end

-- "Ждущий режим" ПНВ для окон с отображающимся инвентарём, которые
-- можно "отловить" штатно, режима прицеливания и для "горячего"
-- рестарта
function standby_nv_fx( mode )
  if mode == nil then return end
  if mode == true then
    if night_vision_fx_on == true then
      night_vision_fx_store = true
      nv_fx( false )
    end
  elseif
    mode == false
    and ( not night_vision_fx_on )
    and night_vision_fx_not_inventory
    and night_vision_fx_not_sniper
    and night_vision_fx_not_trunk
    and night_vision_fx_not_btr
  then
    if night_vision_fx_store == true then
      night_vision_fx_store = false
      nv_fx( true )
    end
  end
end


-- Старт/остановка работы ПНВ
local active_nv_device

function nv_fx( mode )
  if
    mode == true
    and ( not night_vision_fx_on )
    and night_vision_fx_not_inventory
    and night_vision_fx_not_sniper
    and night_vision_fx_not_trunk
    and night_vision_fx_not_btr
  then
    local nightvision_section, nv_item, nv_item_section
    local nv_in_outfit = db.actor:item_in_slot( 6 )
    if nv_in_outfit and not nightvision_section then
      local  nv_sect = nv_in_outfit:section()
      if sys_ini:line_exist( nv_sect, "nightvision_sect" ) then
        nightvision_section = sys_ini:r_string( nv_sect, "nightvision_sect" )
        nv_item = nv_in_outfit
      end
    end
    if not nightvision_section then
      local nv_in_slot = db.actor:item_in_slot( 11 )
      if nv_in_slot then
        local nv_sect = nv_in_slot:section()
        if sys_ini:line_exist( nv_sect, "nightvision_sect" ) then
          nightvision_section = sys_ini:r_string( nv_sect, "nightvision_sect" )
          nv_item = nv_in_slot
        end
      end
    end
    if
      nightvision_section
      and is_nv_allowed( nightvision_section, nv_item )
    then
      turn_on_nv_fx( nightvision_section )
      ogse.save_var( "pnv", true )
      active_nv_device = nv_item
    end
  elseif
    mode == false and night_vision_fx_on and night_vision_fx_not_sniper
  then
    turn_off_nv_fx()
    ogse.delete_var( "pnv" )
    active_nv_device = nil
  end
end


-- Старт ПНВ (не использовать напрямую)
local r2_sun_lumscale

function turn_on_nv_fx( nightvision_section )
  if not is_nv_working() then
    if nightvision_section == "thermal" then
      cmd( "r2_render_mode thermal" )
      night_vision_fx_on = true
      snd_fx_start()
    elseif sys_ini:line_exist( nightvision_section, "pp_eff_name" ) then
      local nightvision_fx = sys_ini:r_string(
        nightvision_section, "pp_eff_name"
      )
      level.add_pp_effector( nightvision_fx, 2997, true )
      level.set_pp_effector_factor( 2997, nv_ppe_factor )
      local light_amp = get_float( nightvision_section, "light_amp" )
      if light_amp then
        r2_sun_lumscale = get_con_float( "r2_sun_lumscale" )
        cmd( "r2_sun_lumscale", light_amp )
      end
      night_vision_fx_on = true
      snd_fx_start()
    end
  end
end


-- Остановка ПНВ (не использовать напрямую)
function turn_off_nv_fx(section)
  if is_nv_working() then
    local nv_sect = db.actor:item_in_slot( 11 )
    if
      ( nv_sect and nv_sect:section() == "device_termovizor" )
      or section == "device_termovizor"
      or get_con_string( "r2_render_mode" ) == "thermal"
    then
      cmd( "r2_render_mode normal" )
    else
      if r2_sun_lumscale then
        cmd( "r2_sun_lumscale", r2_sun_lumscale )
        r2_sun_lumscale = nil
      end
      level.remove_pp_effector( 2997 )
    end
    night_vision_fx_on = false
    snd_fx_stop()
  end
end


-- Перемещение ПНВ в рюкзак
function nv_to_ruck( section )
  if night_vision_fx_on == true then
    turn_off_nv_fx( section )
    ogse.delete_var( "pnv" )
    active_nv_device = nil
  end
end


-- Старт звукового сопровождения работы ПНВ (не использовать напрямую)
function snd_fx_start()
  if snd_nv_start then
    snd_nv_start:play_at_pos(
      db.actor, vector():set( 0, 0, 0 ), 0, sound_object.s2d
    )
    snd_nv_start.volume = snd_nv_fx_volume * snd_nv_start_subvolume
  end
  if snd_nv_work then
    snd_nv_work:play_at_pos(
      db.actor, vector():set( 0, 0, 0 ), 0,
      sound_object.s2d + sound_object.looped
    )
    snd_nv_work.volume = snd_nv_fx_volume * snd_nv_work_subvolume
  end
end


-- Остановка звукового сопровождения работы ПНВ (не использовать напрямую)
function snd_fx_stop()
  if snd_nv_start:playing() then
    snd_nv_start:stop()
  end
  if snd_nv_work and snd_nv_work:playing() then
    snd_nv_work:stop()
  end
  if snd_nv_stop then
    snd_nv_stop:play_at_pos(
      db.actor, vector():set( 0, 0, 0 ), 0, sound_object.s2d
    )
    snd_nv_stop.volume = snd_nv_fx_volume * snd_nv_stop_subvolume
  end
end


-- Включение/выключение ПНВ прицела из меню быстрого доступа
function quicklaunch_nv_scope_call()
  if not night_vision_scope_fx_on then
    nv_scope_fx( true )
  else
    nv_scope_fx( false )
    nv_scope_fx_autoenable = false
  end
end


-- Старт/остановка работы ПНВ в прицеле
function nv_scope_fx( mode )
  if
    mode == true
    and ( not night_vision_scope_fx_on )
    and ( not night_vision_fx_not_sniper )
  then
    local act_it = db.actor:active_item()
    if act_it and act_it:is_weapon() then
      local scope_section = get_active_scope_section( act_it )
      if scope_section then
        -- k01jan (подсветка прицельных сеток)
        local scope_sights_lighting = get_string(
          scope_section, "scope_sights_lighting"
        )
        if scope_sights_lighting then
          turn_on_scope_sights_lighting(
            scope_section, scope_sights_lighting
          )
          nv_scope_fx_autoenable = true
        end
        -- EOF k01jan
        local nightvision_section = get_string(
          scope_section, "nightvision_sect"
        )
        if nightvision_section then
          turn_on_nv_scope_fx( nightvision_section )
          nv_scope_fx_autoenable = true
        end
      end
    end
  elseif mode == false and night_vision_scope_fx_on then
    turn_off_nv_scope_fx()
    turn_off_scope_sights_lighting()
  end
end


-- Старт ночника в прицеле (не использовать напрямую)
local night_vision_scope_fx_eff = false

function turn_on_nv_scope_fx( nightvision_section )
  local nightvision_fx = get_string( nightvision_section, "pp_eff_name" )
  if nightvision_fx then
    standby_nv_fx( true )
    level.add_pp_effector( nightvision_fx, 2998, true )
    level.set_pp_effector_factor( 2998, nv_scope_ppe_factor )
    night_vision_scope_fx_on  = true
    night_vision_scope_fx_eff = true
  end
end

-- Остановка ночника в прицеле (не использовать напрямую)
function turn_off_nv_scope_fx()
  if night_vision_scope_fx_eff then
    level.add_pp_effector( "nv_off.ppe", 2998, false )
    night_vision_scope_fx_eff = false
  end
  night_vision_scope_fx_on = false
  standby_nv_fx( false )
end


-- Включение/выключение ПНВ бинокля из меню быстрого доступа
function quicklaunch_nv_binocular_call()
  if not night_vision_binocular_fx_on then
    nv_binocular_fx( true  )
  else
    nv_binocular_fx( false )
  end
end

-- Старт/остановка работы ПНВ в бинокле
function nv_binocular_fx( mode )
  if
    mode == true
    and ( not night_vision_binocular_fx_on )
    and ( not night_vision_fx_not_sniper )
  then
    local act_it = db.actor:active_item()
    if act_it and act_it:is_binoculars() then
      local nightvision_section = get_string(
        act_it:section(), "nightvision_sect"
      )
      if nightvision_section then
        turn_on_nv_binocular_fx( nightvision_section )
      end
    end
  elseif mode == false and night_vision_binocular_fx_on then
    turn_off_nv_binocular_fx()
  end
end


-- Старт ночника в бинокле (не использовать напрямую)
function turn_on_nv_binocular_fx( nightvision_section )
  local nightvision_fx = get_string( nightvision_section, "pp_eff_name" )
  if nightvision_fx then
    level.add_pp_effector( nightvision_fx, 2999, true )
    level.set_pp_effector_factor( 2999, nv_binocular_ppe_factor )
    night_vision_binocular_fx_on = true
  end
end


-- Остановка ночника в бинокле (не использовать напрямую)
function turn_off_nv_binocular_fx()
  level.add_pp_effector( "nv_off.ppe", 2999, false )
  night_vision_binocular_fx_on = false
end


-- Включение/выключение ПНВ БТР
function quicklaunch_nv_btr_call()
  if not night_vision_btr_fx_on then
    nv_btr_fx( true  )
  else
    nv_btr_fx( false )
  end
end


-- Старт/остановка работы ПНВ БТР
function nv_btr_fx( mode )
  if mode == true and not night_vision_fx_not_btr then
    turn_on_nv_btr_fx( btr_nightvision_section )
  elseif mode == false and night_vision_btr_fx_on then
    turn_off_nv_btr_fx()
  end
end


-- Старт ПНВ БТР (не использовать напрямую)
function turn_on_nv_btr_fx( nightvision_section )
  local nightvision_fx = get_string(
    nightvision_section, "pp_eff_name"
  )
  if nightvision_fx then
    level.add_pp_effector( nightvision_fx, 2996, true )
    level.set_pp_effector_factor( 2996, nv_btr_ppe_factor )
    night_vision_btr_fx_on = true
  end
end


-- Остановка ПНВ БТР (не использовать напрямую)
function turn_off_nv_btr_fx()
  level.remove_pp_effector( 2996 )
  night_vision_btr_fx_on = false
end


function is_nv_allowed( sect, obj )
  if has_alife_info( "no_pnv" ) then return false end
  if dsh_acumm.has_power() > 0 then  return true end
  return false
end


function get_active_nv_device()
  if night_vision_fx_on then
    return active_nv_device
  end
  return nil
end


function on_hit( obj, amount, local_direction, who, bone_index )
  if amount > 0 and bone_index and bone_index > 0 and db.actor:alive() then
    if bone_index >= 11 and bone_index < 18 then -- попадание в голову
      local active_nv = get_active_nv_device()
      if active_nv then
        if math.random() < 0.9 then
          db.actor:move_to_ruck( active_nv )
        end
      end
    end
  end
end


function on_destroy()
  if r2_sun_lumscale then
    cmd( "r2_sun_lumscale", r2_sun_lumscale )
    r2_sun_lumscale = nil
  end
end


local GRIDS
function get_grids()
  if not GRIDS then
    GRIDS = grid_static()
  end
  return GRIDS
end


function on_game_load()
  if GRIDS then
    GRIDS:reset()
    GRIDS:update_rects()
  else
    GRIDS = grid_static()
  end
end


function on_main_menu()
  get_grids():update_rects()
end


class "grid_static" ( CUIScriptWnd )
function grid_static:__init() super()
  self.initialized = false
  self.xml     = CScriptXmlInit()
  local dev    = device()
  local ratio  = dev.width / dev.height
  local width  = math.floor( 1024 * 1.6 / ratio )
  local offset = math.ceil( ( 1024 - width ) / 2 )
  local basic  = Frect():set( 0, 0, 1024, 768 )
  self:Init( basic.x1, basic.y1, basic.x2, basic.y2 )
  self.xml:ParseFile( "ui_scope_grids.xml" )
  self.statics = {}
end


function grid_static:reset()
  local hud = get_hud()
  if hud and self.initialized then
    hud:RemoveDialogToRender( self )
    self.initialized = false
  end
end


function grid_static:add_to_render()
  if not self.initialized then
    local hud = get_hud()
    if hud then
      hud:AddDialogToRender( self )
      self.initialized = true
    end
  end
end


function grid_static:update_rects()
  local dev    = device()
  local ratio  = dev.width / dev.height
  local width  = math.floor( 1024 * 1.6 / ratio )
  local offset = math.ceil( ( 1024 - width ) / 2 )
  for k, v in pairs( self.statics ) do
    self.statics[ k ]:SetWndRect( offset, 0, width, 768 )
    self.statics[ k ]:Show( false )
    self.statics[ k ]:SetStretchTexture( true )
  end
end


function grid_static:is_active()
  for k, v in pairs( self.statics ) do
    if self.statics[ k ]:IsShown() then
      return true
    end
  end
  return false
end


function grid_static:show_static( static, status )
  if static == "" then return end
  if not self.statics[ static ] then
    self.statics[ static ] = self.xml:InitStatic( static, self )
    self:update_rects()
  end
  if status and not self.statics[ static ]:IsShown() then
    self:add_to_render()
    self.statics[ static ]:Show( true )
  end
end


function grid_static:hide_static( static )
  if not static then
    for k, v in pairs( self.statics ) do
      if self.statics[ k ]:IsShown() then
        static = k
        break
      end
    end
  end
  if
    static ~= ""
    and self.statics[ static ]
    and self.statics[ static ]:IsShown()
  then
    self.statics[ static ]:Show( false )
    self:reset()
  end
end


function turn_on_scope_sights_lighting( scope_sect, texture )
  if dsh_acumm.has_power() > 0 then
    get_grids():show_static( texture, true )
    night_vision_scope_fx_on = true
    ogse_signals.get_mgr():call( "on_scope_sights_lighting" )
  end
end


function turn_off_scope_sights_lighting()
  get_grids():hide_static( texture )
  night_vision_scope_fx_on = false
end


function on_take( obj )
  if not obj:is_scope() then return end
  local texture = get_string( obj:section(), "scope_sights_lighting" )
  if texture then
    get_grids():show_static( texture, false )
  end
end


function get_active_scope_section( wpn )
  if not wpn then wpn = db.actor:active_item() end
  if not wpn then return end
  if     ogse_wpn_utils.get_scope_status( wpn ) == 1 then
    return wpn:section()
  elseif ogse_wpn_utils.get_scope_status( wpn ) == 2 then
    local scope_status = ogse_wpn_utils.get_scope_flag( wpn )
    if scope_status then
      local sect       = wpn:section()
      local scope_sect = get_string_wq( sect, "scope_name" )
      if scope_sect then return scope_sect end
    end
  end
end


local scope_colored = false

function turn_on_scope_color()
  if scope_colored then return end
  local scope_sect = get_active_scope_section()
  if scope_sect then
    if night_vision_scope_fx_on == false then -- ночной режим не включен
      local scope_color = get_string(
        scope_sect, "scope_color_sect", "0,0,0,0"
      )
      cmd( "r2_color_grading", scope_color )
    end
  end
  scope_colored = true
end


function turn_off_scope_color()
  if scope_colored then
    cmd( "r2_color_grading", "0,0,0,0" )
    scope_colored = false
  end
end


function on_first_update()
  local sm = ogse_signals.get_mgr()
  sm:subscribe({ signal = "on_item_to_ruck", fun = this.chek_drop_pnv })
  sm:subscribe({ signal = "on_item_to_slot", fun = this.chek_outfit_double_pnv })
  sm:subscribe({ signal = "on_take",         fun = this.on_take })
  try_to_restart_nv_fx()
  local wpn        = db.actor:item_in_slot( 2 )
  local scope_sect = get_active_scope_section( wpn )
  if scope_sect then
    local texture = get_string( scope_sect, "scope_sights_lighting" )
    if texture then
      get_grids():show_static( texture, false )
    end
  end
end
