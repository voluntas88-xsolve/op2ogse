-- -*- mode: lua; coding: windows-1251-dos -*-


function printf()
end


local total_debug = false -- ogse_debug.verbose_debug
function write_log( str )
  if total_debug then log1( str ) end
end


-- ПЕРЕМЕЩЕНИЕ
-- мы уже находимся в необходимом состоянии?
class "eva_state_mgr_movement" ( property_evaluator )
function eva_state_mgr_movement:__init( name, st ) super( nil, name )
  self.st = st
end


function eva_state_mgr_movement:evaluate()
  write_log( "~~STATEMGR_move_eva_1" )
  return state_lib.states[ self.st.target_state ].movement == nil
    or state_lib.states[ self.st.target_state ].movement == self.object:target_movement_type()
end


-- нужно ли нам идти
class "eva_state_mgr_movement_walk" ( property_evaluator )
function eva_state_mgr_movement_walk:__init( name, st ) super( nil, name )
  self.st = st
end


function eva_state_mgr_movement_walk:evaluate()
  write_log( "~~STATEMGR_move_eva_2" )
  return state_lib.states[ self.st.target_state ].movement == move.walk
end


-- нужно ли нам бежать
class "eva_state_mgr_movement_run" ( property_evaluator )
function eva_state_mgr_movement_run:__init( name, st ) super( nil, name )
  self.st = st
end


function eva_state_mgr_movement_run:evaluate()
  write_log( "~~STATEMGR_move_eva_3" )
  return state_lib.states[ self.st.target_state ].movement == move.run
end


-- нужно ли нам стоять
class "eva_state_mgr_movement_stand" ( property_evaluator )
function eva_state_mgr_movement_stand:__init( name, st ) super( nil, name )
  self.st = st
end


function eva_state_mgr_movement_stand:evaluate()
  write_log( "~~STATEMGR_move_eva_4" )
  return state_lib.states[ self.st.target_state ].movement == move.stand
end


-- стоим ли мы
class "eva_state_mgr_movement_stand_now" ( property_evaluator )
function eva_state_mgr_movement_stand_now:__init( name, st ) super( nil, name )
  self.st = st
end


function eva_state_mgr_movement_stand_now:evaluate()
  write_log( "~~STATEMGR_move_eva_5" )
  return self.object:target_movement_type() == move.stand
end


-- Включаем ходьбу
class "act_state_mgr_movement_walk" ( action_base )
function act_state_mgr_movement_walk:__init( name, st ) super( nil, name )
  self.st = st
end


function act_state_mgr_movement_walk:initialize()
  action_base.initialize( self )
  write_log( "~~STATEMGR_move_1" )
  self.object:set_movement_type( move.walk )
  write_log( "~~STATEMGR_move_1_end" )
end


function act_state_mgr_movement_walk:execute()
  action_base.execute( self )
end


function act_state_mgr_movement_walk:finalize()
  action_base.finalize( self )
end


-- Включаем бег
class "act_state_mgr_movement_run" ( action_base )
function act_state_mgr_movement_run:__init( name, st ) super( nil, name )
  self.st = st
end


function act_state_mgr_movement_run:initialize()
  action_base.initialize( self )
  write_log( "~~STATEMGR_move_2" )
  self.object:set_movement_type( move.run )
  write_log( "~~STATEMGR_move_2_end" )
end


function act_state_mgr_movement_run:execute()
  action_base.execute( self )
end


function act_state_mgr_movement_run:finalize()
  action_base.finalize( self )
end


-- Включаем стояние на месте
class "act_state_mgr_movement_stand" ( action_base )
function act_state_mgr_movement_stand:__init( name, st ) super( nil, name )
  self.st = st
end


function act_state_mgr_movement_stand:initialize()
  action_base.initialize( self )
  write_log( "~~STATEMGR_move_3" )
  self.object:set_movement_type( move.stand )
  write_log( "~~STATEMGR_move_3_end" )
end


function act_state_mgr_movement_stand:execute()
  action_base.execute( self )
end


function act_state_mgr_movement_stand:finalize()
  action_base.finalize( self )
end


-- STAND_turn
class "act_state_mgr_movement_stand_turn" ( action_base )
function act_state_mgr_movement_stand_turn:__init( name, st ) super( nil, name )
  self.st = st
end


function act_state_mgr_movement_stand_turn:initialize()
  action_base.initialize( self )
  state_mgr_direction.turn( self.object, self.st )
  self.object:set_movement_type( move.stand )
end


function act_state_mgr_movement_stand_turn:execute()
  action_base.execute( self )
end


function act_state_mgr_movement_stand_turn:finalize()
  action_base.finalize( self )
end


-- STAND_search
class "act_state_mgr_movement_stand_search" ( action_base )
function act_state_mgr_movement_stand_search:__init( name, st )
  super( nil, name )
  self.st = st
end


function act_state_mgr_movement_stand_search:initialize()
  action_base.initialize( self )
  self.object:set_movement_type( move.stand )
  self.object:set_sight(
    state_mgr_direction.look_position_type( self.object, self.st ), nil, 0
  )
end


function act_state_mgr_movement_stand_search:execute()
  action_base.execute( self )
end


function act_state_mgr_movement_stand_search:finalize()
  action_base.finalize( self )
end


-- WALK_turn
class "act_state_mgr_movement_walk_turn" ( action_base )
function act_state_mgr_movement_walk_turn:__init( name, st ) super( nil, name )
  self.st = st
end


function act_state_mgr_movement_walk_turn:initialize()
  action_base.initialize( self )
  self.object:set_movement_type( move.walk )
  state_mgr_direction.turn( self.object, self.st )
end


function act_state_mgr_movement_walk_turn:execute()
  action_base.execute( self )
end


function act_state_mgr_movement_walk_turn:finalize()
  action_base.finalize( self )
end


-- WALK_search
class "act_state_mgr_movement_walk_search" ( action_base )
function act_state_mgr_movement_walk_search:__init( name, st ) super( nil, name )
  self.st = st
end


function act_state_mgr_movement_walk_search:initialize()
  action_base.initialize( self )
  self.object:set_movement_type( move.walk )
  self.object:set_sight(
    state_mgr_direction.look_position_type( self.object, self.st ), nil, 0
  )
end


function act_state_mgr_movement_walk_search:execute()
  action_base.execute( self )
end


function act_state_mgr_movement_walk_search:finalize()
  action_base.finalize( self )
end


-- RUN_turn
class "act_state_mgr_movement_run_turn" ( action_base )
function act_state_mgr_movement_run_turn:__init( name, st ) super( nil, name )
  self.st = st
end


function act_state_mgr_movement_run_turn:initialize()
  action_base.initialize( self )
  self.object:set_movement_type( move.run )
  state_mgr_direction.turn( self.object, self.st )
end


function act_state_mgr_movement_run_turn:execute()
  action_base.execute( self )
end


function act_state_mgr_movement_run_turn:finalize()
  action_base.finalize( self )
end


-- RUN_search
class "act_state_mgr_movement_run_search" ( action_base )
function act_state_mgr_movement_run_search:__init( name, st ) super( nil, name )
  self.st = st
end


function act_state_mgr_movement_run_search:initialize()
  action_base.initialize( self )
  self.object:set_movement_type( move.run )
  self.object:set_sight(
    state_mgr_direction.look_position_type( self.object, self.st ), nil, 0
  )
end


function act_state_mgr_movement_run_search:execute()
  action_base.execute( self )
end


function act_state_mgr_movement_run_search:finalize()
  action_base.finalize( self )
end
