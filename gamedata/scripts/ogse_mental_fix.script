-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_npc_death", fun = this.on_npc_death })
  sm:subscribe({ signal = "on_npc_net_destroy", fun = this.on_npc_death })
  sm:subscribe({ signal = "on_npc_spawn", fun = this.on_npc_spawn })
end


function on_npc_spawn( obj, binder )
  if not obj:alive() then return end
  if xr_companion.is_companion( obj:id() ) then return end
  if not db.storage[ obj:id() ].state_mgr then return end
  local s = {
    [ "signal" ] = "on_update",
    [ "self"   ] = obj,
    [ "fun"    ] = this.check_mental,
  }
  binder[ script_name() .. ".subscribed" ] = s
  ogse_signals.get_mgr():subscribe( s )
end


function on_npc_death( obj, who )
  local binder     = obj:binded_object()
  local subscribed = binder[ script_name() .. ".subscribed" ]
  if subscribed then
    ogse_signals.get_mgr():unsubscribe( subscribed )
    binder[ script_name() .. ".subscribed" ] = nil
  end
end


function check_mental( obj )
  ogse_signals.get_mgr():reschedule( 5000 )
  local storage = db.storage[ obj:id() ].state_mgr
  ASSERT( storage, "state_mgr not found in db.storage: %s", obj:name() )
  local binder  = obj:binded_object()
  local mental  = state_lib.states[ storage.target_state ].mental
  if binder[ script_name() .. ".check_mental" ] then
    if mental and mental == anim.panic then
      log2(
        "[%s]: %s is in panic more than 25 seconds! Trying to recover!",
        script_name(), obj:name()
      )
      obj:set_mental_state( anim.danger )
    end
    binder[ script_name() .. ".check_mental" ] = nil
  else
    if mental and mental == anim.panic then
      log2(
        "[%s]: %s is in panic - will check it for freezing.",
        script_name(), obj:name()
      )
      binder[ script_name() .. ".check_mental" ] = true
      ogse_signals.get_mgr():reschedule( 25000 )
    end
  end
end
