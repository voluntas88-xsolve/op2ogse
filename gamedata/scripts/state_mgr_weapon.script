-- -*- mode: lua; coding: windows-1251-dos -*-

local total_debug = false -- ogse_debug.verbose_debug

local strappableWeapons = {
  [ clsid.wpn_ak74_s     ] = true,
  [ clsid.wpn_bm16_s     ] = true,
  [ clsid.wpn_groza_s    ] = true,
  [ clsid.wpn_lr300_s    ] = true,
  [ clsid.wpn_rpg7_s     ] = true,
  [ clsid.wpn_shotgun_s  ] = true,
  [ clsid.wpn_svd_s      ] = true,
  [ clsid.wpn_svu_s      ] = true,
  [ clsid.wpn_val_s      ] = true,
  [ clsid.wpn_vintorez_s ] = true,
}


function write_log( str )
  if total_debug then log1( str ) end
end


-- ОРУЖИЕ
-- Соответствует ли состояние оружия требуемому
class "eva_state_mgr_weapon" ( property_evaluator )
function eva_state_mgr_weapon:__init( name, st ) super( nil, name )
  self.st = st
end


function eva_state_mgr_weapon:evaluate()
  write_log( "~~STATEMGR_weapon_eva_1" )
  local weapon = state_lib.states[ self.st.target_state ].weapon
  write_log( "~~STATEMGR_weapon_eva_1_2" )
  if weapon == nil then
    write_log( "~~STATEMGR_weapon_eva_ret_1_1" )
    return true
  end
  write_log( "~~STATEMGR_weapon_eva_1_3" )
  local wm         = rx_wmgr.get_wm( self.object )
  local bestweapon = ( wm and wm:get_weapon() ) or self.object:best_weapon()
  write_log( "~~STATEMGR_weapon_eva_1_4" )
  if not isWeapon( bestweapon ) then
    write_log( "~~STATEMGR_weapon_eva_ret_1_2" )
    return true
  end
  write_log( "~~STATEMGR_weapon_eva_1_5" )
  local activeitem = self.object:active_item()
  write_log( "~~STATEMGR_weapon_eva_1_6" )
  if
    weapon == "strapped"
    and (
      ( strappable_weapon( bestweapon ) and self.object:weapon_strapped() )
      or ( ( not strappable_weapon( bestweapon ) ) and activeitem == nil )
    )
  then
    write_log( "~~STATEMGR_weapon_eva_ret_1_3" )
    return true
  end
  write_log( "~~STATEMGR_weapon_eva_1_7" )
  if
    (
      weapon == "unstrapped"
      or weapon == "fire"
      or weapon == "sniper_fire"
    )
    and self.object:weapon_unstrapped() == true
    and activeitem ~= nil
    and bestweapon ~= nil
    and activeitem:id() == bestweapon:id()
  then
    write_log( "~~STATEMGR_weapon_eva_ret_1_4" )
    return true
  end
  write_log( "~~STATEMGR_weapon_eva_8" )
  if weapon == "none" and activeitem == nil then
    write_log( "~~STATEMGR_weapon_eva_ret_1_5" )
    return true
  end
  write_log( "~~STATEMGR_weapon_eva_9" )
  if weapon == "drop" and activeitem == nil then
    write_log( "~~STATEMGR_weapon_eva_ret_1_6" )
    return true
  end
  write_log( "~~STATEMGR_weapon_eva_1_end" )
  return false
end


-- Лочим ли мы все это для оружия или нет?
class "eva_state_mgr_weapon_locked" ( property_evaluator )
function eva_state_mgr_weapon_locked:__init( name, st ) super( nil, name )
  self.st = st
end


function eva_state_mgr_weapon_locked:evaluate()
  write_log( "~~STATEMGR_weapon_eva_2" )
  return not (
    self.object:weapon_unstrapped() or self.object:weapon_strapped()
  )
end


-- Необходимо ли повесить оружие на спину
class "eva_state_mgr_weapon_strapped" ( property_evaluator )
function eva_state_mgr_weapon_strapped:__init( name, st ) super( nil, name )
  self.st = st
end


function eva_state_mgr_weapon_strapped:evaluate()
  write_log( "~~STATEMGR_weapon_eva_3" )
  return state_lib.states[ self.st.target_state ].weapon == "strapped"
end


-- Висит ли уже оружие на спине
class "eva_state_mgr_weapon_strapped_now" ( property_evaluator )
function eva_state_mgr_weapon_strapped_now:__init( name ) super( nil, name )
end


function eva_state_mgr_weapon_strapped_now:evaluate()
  write_log( "~~STATEMGR_weapon_eva_4" )
  local wm  = rx_wmgr.get_wm( self.object )
  local wpn = ( wm and wm:get_weapon() ) or self.object:best_weapon()
  if not isWeapon( wpn ) then return true end
  return self.object:weapon_strapped()
    or ( ( not strappable_weapon( wpn ) ) and self.object:active_item() == nil )
end


-- Необходимо ли держать оружие в руках
class "eva_state_mgr_weapon_unstrapped" ( property_evaluator )
function eva_state_mgr_weapon_unstrapped:__init( name, st ) super( nil, name )
  self.st = st
end


function eva_state_mgr_weapon_unstrapped:evaluate()
  write_log( "~~STATEMGR_weapon_eva_5" )
  return state_lib.states[ self.st.target_state ].weapon == "unstrapped"
    or state_lib.states[ self.st.target_state ].weapon == "fire"
    or state_lib.states[ self.st.target_state ].weapon == "sniper_fire"
end


-- Держит ли уже он оружие в руках
class "eva_state_mgr_weapon_unstrapped_now" ( property_evaluator )
function eva_state_mgr_weapon_unstrapped_now:__init( name ) super( nil, name )
end


function eva_state_mgr_weapon_unstrapped_now:evaluate()
  write_log( "~~STATEMGR_weapon_eva_6" )
  local wm  = rx_wmgr.get_wm( self.object )
  local wpn = ( wm and wm:get_weapon() ) or self.object:best_weapon()
  return self.object:weapon_unstrapped()
    and self.object:active_item() ~= nil
    and wpn ~= nil and self.object:active_item():id() == wpn:id()
end


-- Необходимо ли спрятать оружие вообще
class "eva_state_mgr_weapon_none" ( property_evaluator )
function eva_state_mgr_weapon_none:__init( name, st ) super( nil, name )
  self.st = st
end


function eva_state_mgr_weapon_none:evaluate()
  write_log( "~~STATEMGR_weapon_eva_7" )
  return state_lib.states[ self.st.target_state ].weapon == "none"
end


-- Спрятано ли оружие вообще.
class "eva_state_mgr_weapon_none_now" ( property_evaluator )
function eva_state_mgr_weapon_none_now:__init( name ) super( nil, name )
end


function eva_state_mgr_weapon_none_now:evaluate()
  write_log( "~~STATEMGR_weapon_eva_8" )
  return self.object:active_item() == nil
end


-- Необходимо ли бросить оружие
class "eva_state_mgr_weapon_drop" ( property_evaluator )
function eva_state_mgr_weapon_drop:__init( name, st ) super( nil, name )
  self.st = st
end


function eva_state_mgr_weapon_drop:evaluate()
  write_log( "~~STATEMGR_weapon_eva_9" )
  return state_lib.states[ self.st.target_state ].weapon == "drop"
end


-- Необходимо ли стрелять
class "eva_state_mgr_weapon_fire" ( property_evaluator )
function eva_state_mgr_weapon_fire:__init( name, st ) super( nil, name )
  self.st = st
end


function eva_state_mgr_weapon_fire:evaluate()
  write_log( "~~STATEMGR_weapon_eva_10" )
  return state_lib.states[ self.st.target_state ].weapon == "fire"
    or state_lib.states[ self.st.target_state ].weapon == "sniper_fire"
end


-- Достать оружие
class "act_state_mgr_weapon_unstrapp" ( action_base )
function act_state_mgr_weapon_unstrapp:__init( name, st ) super( nil, name )
  self.st = st
end

function act_state_mgr_weapon_unstrapp:initialize()
  action_base.initialize( self )
  write_log( "~~STATEMGR_weap_1" )
  self.object:set_item(
    get_idle_state( self.st.target_state ),
    get_weapon( self.object, self.st.target_state )
  )
  write_log( "~~STATEMGR_weap_1_end" )
end


function act_state_mgr_weapon_unstrapp:execute()
  action_base.execute( self )
end


function act_state_mgr_weapon_unstrapp:finalize()
  action_base.finalize( self )
end


-- Спрятать оружие
class "act_state_mgr_weapon_strapp" ( action_base )
function act_state_mgr_weapon_strapp:__init( name, st ) super( nil, name )
  self.st = st
end


function act_state_mgr_weapon_strapp:initialize()
  action_base.initialize( self )
  write_log( "~~STATEMGR_weap_2" )
  local weap = get_weapon( self.object, self.st.target_state )
  if strappable_weapon( weap ) then
    self.object:set_item( object.strap, weap )
  else
    self.object:set_item( object.idle,  nil  )
  end
  write_log( "~~STATEMGR_weap_2_end" )
end


function act_state_mgr_weapon_strapp:execute()
  action_base.execute( self )
end


function act_state_mgr_weapon_strapp:finalize()
  action_base.finalize( self )
end


-- убрать оружие
class "act_state_mgr_weapon_none" ( action_base )
function act_state_mgr_weapon_none:__init( name, st ) super( nil, name )
  self.st = st
end


function act_state_mgr_weapon_none:initialize()
  action_base.initialize( self )
  write_log( "~~STATEMGR_weap_3" )
  self.object:set_item( object.idle, nil )
  write_log( "~~STATEMGR_weap_3_end" )
end


function act_state_mgr_weapon_none:execute()
  action_base.execute( self )
end


function act_state_mgr_weapon_none:finalize()
  action_base.finalize( self )
end


-- бросить оружие
class "act_state_mgr_weapon_drop" ( action_base )
function act_state_mgr_weapon_drop:__init( name, st ) super( nil, name )
  self.st = st
end


function act_state_mgr_weapon_drop:initialize()
  action_base.initialize( self )
  write_log( "~~STATEMGR_weap_4" )
  local weap = get_weapon( self.object, self.st.target_state )
  if strappable_weapon( weap ) then
    self.object:set_item( object.drop, weap )
  else
    self.object:set_item( object.idle, nil  )
  end
  write_log( "~~STATEMGR_weap_4_end" )
end


function act_state_mgr_weapon_drop:execute()
  action_base.execute( self )
end


function act_state_mgr_weapon_drop:finalize()
  action_base.finalize( self )
end


function get_idle_state( target_state )
  if
    state_lib.states[ target_state ].mental == anim.danger
    and state_lib.states[ target_state ].movement == move.stand
    and state_lib.states[ target_state ].animation == nil
  then
    return object.aim1
  else
    return object.idle
  end
end


function get_weapon( obj, target_state )
  if state_lib.states[ target_state ].weapon_slot == nil then
    local wm  = rx_wmgr.get_wm( obj )
    return ( wm and wm:get_weapon() ) or obj:best_weapon()
  else
    return obj:item_in_slot( state_lib.states[ target_state ].weapon_slot )
  end
end


function strappable_weapon( obj )
  if obj == nil then return false end
  local id = obj:clsid()
  return ( id and strappableWeapons[ id ] )
end


function get_queue_params( npc, target )
  return 3, 1000
end
